openapi: 3.0.0
x-origin:
  - url: https://api.c4a0pho0ft-laposteaz1-s1-public.model-t.cc.commerce.ondemand.com/rest/v2/api-docs
    format: swagger
    version: "2.0"
    converter:
      url: https://github.com/mermade/oas-kit
      version: 7.0.5
info:
  description: These services manage all of the common commerce functionality, and
    also include customizations from installed AddOns. The implementing
    extension is called commercewebservices.
  version: "2.0"
  title: Commerce Webservices
  license:
    name: Use of this file is subject to the terms of your agreement with SAP SE or
      its affiliates respecting the use of the SAP product for which this file
      relates.
tags:
  - name: Address
    description: Address Controller
  - name: Base Sites
    description: Base Sites Controller
  - name: Base Stores
    description: Base Stores Controller
  - name: Carts
    description: Carts Controller
  - name: Catalogs
    description: Catalogs Controller
  - name: Components
    description: Component Controller
  - name: Consents
    description: Consents Controller
  - name: Countries
    description: Countries Controller
  - name: Customer Coupons
    description: Customer Coupons Controller
  - name: Customer Groups
    description: Customer Groups Controller
  - name: Export
    description: Export Controller
  - name: Extended Carts
    description: Extended Carts Controller
  - name: Feeds
    description: Feeds Controller
  - name: Forgotten Passwords
    description: Forgotten Passwords Controller
  - name: Login Notification
    description: Login Notification Controller
  - name: Merchant Callback
    description: Merchant Callback Controller
  - name: Miscs
    description: Miscs Controller
  - name: Orders
    description: Orders Controller
  - name: Pages
    description: Page Controller
  - name: Payment Details
    description: Payment Details Controller
  - name: Payment Modes
    description: Payment Modes Controller
  - name: Products
    description: Products Controller
  - name: Promotions
    description: Promotions Controller
  - name: Return Requests
    description: Order Returns Controller
  - name: Save Cart
    description: Save Cart Controller
  - name: Stores
    description: Stores Controller
  - name: Users
    description: Users Controller
  - name: Vouchers
    description: Vouchers Controller
paths:
  /basesites:
    get:
      tags:
        - Base Sites
      summary: Get all base sites.
      description: Get all base sites with corresponding base stores details in FULL mode.
      operationId: getBaseSites
      parameters:
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/BaseSiteList"
            application/json:
              schema:
                $ref: "#/components/schemas/BaseSiteList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/basestores/{baseStoreUid}":
    get:
      tags:
        - Base Stores
      summary: Get a base store.
      description: Returns details of a specific base store based on its identifier.
        The response contains detailed base store information.
      operationId: getBaseStore
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: baseStoreUid
          in: path
          description: Base store name
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/BaseStore"
            application/json:
              schema:
                $ref: "#/components/schemas/BaseStore"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/cardtypes":
    get:
      tags:
        - Miscs
      summary: Get a list of supported payment card types.
      description: Lists supported payment card types.
      operationId: getCardTypes
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/CardTypeList"
            application/json:
              schema:
                $ref: "#/components/schemas/CardTypeList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/catalogs":
    get:
      tags:
        - Catalogs
      summary: Get a list of catalogs
      description: Returns all catalogs with versions defined for the base store.
      operationId: getCatalogs
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/CatalogList"
            application/json:
              schema:
                $ref: "#/components/schemas/CatalogList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/catalogs/{catalogId}":
    get:
      tags:
        - Catalogs
      summary: Get a catalog
      description: Returns information about a catalog based on its ID, along with the
        versions defined for the current base store.
      operationId: getCatalog
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: catalogId
          in: path
          description: Catalog identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Catalog"
            application/json:
              schema:
                $ref: "#/components/schemas/Catalog"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}":
    get:
      tags:
        - Catalogs
      summary: Get information about catalog version
      description: Returns information about the catalog version that exists for the
        current base store.
      operationId: getCatalogVersion
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: catalogId
          in: path
          description: Catalog identifier
          required: true
          schema:
            type: string
        - name: catalogVersionId
          in: path
          description: Catalog version identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/CatalogVersion"
            application/json:
              schema:
                $ref: "#/components/schemas/CatalogVersion"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}/categories/{categoryId}":
    get:
      tags:
        - Catalogs
      summary: Get information about catagory in a catalog version
      description: Returns information about a specified category that exists in a
        catalog version available for the current base store.
      operationId: getCategories
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: catalogId
          in: path
          description: Catalog identifier
          required: true
          schema:
            type: string
        - name: catalogVersionId
          in: path
          description: Catalog version identifier
          required: true
          schema:
            type: string
        - name: categoryId
          in: path
          description: Category identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/CategoryHierarchy"
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryHierarchy"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/cms/components":
    get:
      tags:
        - Components
      summary: Get component data
      description: >-
        Finds cms components by the specified IDs. When none is provided, this
        will retrieve all components

        The components list will be filtered by the given catalog, product or category restrictions, as well as by the pagination information. The result will be sorted in the specified order.
      operationId: getComponentsByIds
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: catalogCode
          in: query
          description: Catalog code
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: categoryCode
          in: query
          description: Category code
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: componentIds
          in: query
          description: List of Component identifiers
          required: false
          allowEmptyValue: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: currentPage
          in: query
          description: Optional pagination parameter. Default value 0.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: fields
          in: query
          description: Response configuration (list of fields, which should be returned in
            response)
          required: false
          allowEmptyValue: false
          schema:
            type: string
            enum:
              - BASIC
              - DEFAULT
              - FULL
            default: DEFAULT
        - name: pageSize
          in: query
          description: Optional pagination parameter. Default value 10.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: productCode
          in: query
          description: Product code
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: sort
          in: query
          description: Optional sort criterion. No default value.
          required: false
          allowEmptyValue: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ListAdaptedComponents"
            application/json:
              schema:
                $ref: "#/components/schemas/ListAdaptedComponents"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    post:
      tags:
        - Components
      summary: Get components' data by id given in body
      description: Given a list of component identifiers in body, return cms component data.
      operationId: searchComponentsByIds
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: catalogCode
          in: query
          description: Catalog code
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: categoryCode
          in: query
          description: Category code
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: currentPage
          in: query
          description: Optional pagination parameter. Default value 0.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: fields
          in: query
          description: Response configuration (list of fields, which should be returned in
            response)
          required: false
          allowEmptyValue: false
          schema:
            type: string
            enum:
              - BASIC
              - DEFAULT
              - FULL
            default: DEFAULT
        - name: pageSize
          in: query
          description: Optional pagination parameter. Default value 10.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: productCode
          in: query
          description: Product code
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: sort
          in: query
          description: Optional sort criterion. No default value.
          required: false
          allowEmptyValue: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ComponentIDList"
        description: List of Component identifiers
        required: true
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ListAdaptedComponents"
            application/json:
              schema:
                $ref: "#/components/schemas/ListAdaptedComponents"
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: true
  "/{baseSiteId}/cms/components/{componentId}":
    get:
      tags:
        - Components
      summary: Get component data by id
      description: Given a component identifier, return cms component data.
      operationId: getComponentById
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: catalogCode
          in: query
          description: Catalog code
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: categoryCode
          in: query
          description: Category code
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: componentId
          in: path
          description: Component identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: Response configuration (list of fields, which should be returned in
            response)
          required: false
          allowEmptyValue: false
          schema:
            type: string
            enum:
              - BASIC
              - DEFAULT
              - FULL
            default: DEFAULT
        - name: productCode
          in: query
          description: Product code
          required: false
          allowEmptyValue: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ComponentAdaptedData"
            application/json:
              schema:
                $ref: "#/components/schemas/ComponentAdaptedData"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/cms/pages":
    get:
      tags:
        - Pages
      summary: Get page data with a list of cms content slots
      description: >-
        Get page data with a list of cms content slots based on pageLabelOrId or
        code. If none is provided then this will retrieve a Homepage cms content
        slots.

        Content pages can be filtered by pageLabelOrId while the rest of the page types can be filtered by the code.
      operationId: getPage
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: code
          in: query
          description: If pageType is ProductPage, code should be product code; if
            pageType is CategoryPage, code should be category code; if pageType
            is CatalogPage, code should be catalog code
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: fields
          in: query
          description: Response configuration (list of fields, which should be returned in
            response)
          required: false
          allowEmptyValue: false
          schema:
            type: string
            enum:
              - BASIC
              - DEFAULT
              - FULL
            default: DEFAULT
        - name: pageLabelOrId
          in: query
          description: "Page Label or Id; if no page has a label that matches the provided
            label exactly, try to find pages whose label starts with a section
            of the provided label. Otherwise, try to find the page by id. Note:
            URL encoding on the page label should be applied when the label
            contains special characters"
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: pageType
          in: query
          description: Page type
          required: false
          allowEmptyValue: false
          schema:
            type: string
            enum:
              - ContentPage
              - ProductPage
              - CategoryPage
              - CatalogPage
            default: ContentPage
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/PageAdaptedData"
            application/json:
              schema:
                $ref: "#/components/schemas/PageAdaptedData"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/cms/pages/{pageId}":
    get:
      tags:
        - Pages
      summary: Get page data for specific page id with a list of cms content slots
      description: Given a page identifier, return the page data with a list of cms
        content slots, each of which contains a list of cms component data.
      operationId: getPageById
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: Response configuration (list of fields, which should be returned in
            response)
          required: false
          allowEmptyValue: false
          schema:
            type: string
            enum:
              - BASIC
              - DEFAULT
              - FULL
            default: DEFAULT
        - name: pageId
          in: path
          description: Page Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/PageAdaptedData"
            application/json:
              schema:
                $ref: "#/components/schemas/PageAdaptedData"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/cms/sitepages":
    get:
      tags:
        - Pages
      summary: Get a list of page data.
      description: Get a list page data with pagination support.
      operationId: getAllPages
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: currentPage
          in: query
          description: Pagination parameter. Default value 0.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: fields
          in: query
          description: Response configuration (list of fields, which should be returned in
            response)
          required: false
          allowEmptyValue: false
          schema:
            type: string
            enum:
              - BASIC
              - DEFAULT
              - FULL
            default: DEFAULT
        - name: pageSize
          in: query
          description: Optional pagination parameter. Default value 10.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: pageType
          in: query
          description: Page type.
          required: false
          allowEmptyValue: false
          schema:
            type: string
            enum:
              - ContentPage
              - ProductPage
              - CategoryPage
              - CatalogPage
        - name: sort
          in: query
          description: Optional sort criterion. No default value.
          required: false
          allowEmptyValue: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ListAdaptedPages"
            application/json:
              schema:
                $ref: "#/components/schemas/ListAdaptedPages"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/countries":
    get:
      tags:
        - Countries
      summary: Get a list of countries.
      description: If the value of type equals to shipping, then return shipping
        countries. If the value of type equals to billing, then return billing
        countries. If the value of type is not given, return all countries. The
        list is sorted alphabetically.
      operationId: getCountries
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: type
          in: query
          description: The type of countries.
          required: false
          allowEmptyValue: false
          schema:
            type: string
            enum:
              - SHIPPING
              - BILLING
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/CountryList"
            application/json:
              schema:
                $ref: "#/components/schemas/CountryList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/countries/{countyIsoCode}/regions":
    get:
      tags:
        - Countries
      summary: Fetch the list of regions for the provided country.
      description: Lists all regions.
      operationId: getCountryRegions
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: countyIsoCode
          in: path
          description: An ISO code for a country
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/RegionList"
            application/json:
              schema:
                $ref: "#/components/schemas/RegionList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/currencies":
    get:
      tags:
        - Miscs
      summary: Get a list of available currencies.
      description: Lists all available currencies (all usable currencies for the
        current store). If the list of currencies for a base store is empty, a
        list of all currencies available in the system is returned.
      operationId: getCurrencies
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/CurrencyList"
            application/json:
              schema:
                $ref: "#/components/schemas/CurrencyList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/customergroups":
    get:
      tags:
        - Customer Groups
      summary: Get all subgroups of a customergroup.
      description: >-
        Returns all customer groups that are direct subgroups of a
        customergroup.


        To try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.
      operationId: getCustomerGroups
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: currentPage
          in: query
          description: Current page number (starts with 0).
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: BASIC
        - name: pageSize
          in: query
          description: Number of customer group returned in one page.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/UserGroupList"
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    post:
      tags:
        - Customer Groups
      summary: Creates a new customer group.
      description: >-
        Creates a new customer group that is a direct subgroup of a
        customergroup.


        To try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.
      operationId: createCustomerGroup
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/UserGroup"
          application/json:
            schema:
              $ref: "#/components/schemas/UserGroup"
        description: User group object with id and name.
        required: true
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/customergroups/{groupId}":
    get:
      tags:
        - Customer Groups
      summary: Get a specific customer group.
      description: >-
        Returns a customer group with a specific groupId.


        To try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.
      operationId: getCustomerGroup
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: BASIC
        - name: groupId
          in: path
          description: Group identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/UserGroup"
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroup"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/customergroups/{groupId}/members":
    put:
      tags:
        - Customer Groups
      summary: Sets members for a user group.
      description: >-
        Sets members for a user group. The list of existing members is
        overwritten with a new one.


        To try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.
      operationId: replaceUsersForCustomerGroup
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          description: Group identifier.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/MemberList"
          application/json:
            schema:
              $ref: "#/components/schemas/MemberList"
        description: List of users to set for customer group.
        required: true
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    patch:
      tags:
        - Customer Groups
      summary: Assigns user(s) to a customer group.
      description: >-
        Assigns user(s) to a customer group.


        To try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.
      operationId: updateCustomerGroupWithUsers
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          description: Group identifier.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/MemberList"
          application/json:
            schema:
              $ref: "#/components/schemas/MemberList"
        description: List of users to assign to customer group.
        required: true
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/customergroups/{groupId}/members/{userId}":
    delete:
      tags:
        - Customer Groups
      summary: Deletes a user from a customer group.
      description: >-
        Deletes user from a customer group.


        To try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.
      operationId: removeUsersFromCustomerGroup
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          description: Group identifier.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: User identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/deliverycountries":
    get:
      tags:
        - Miscs
      summary: Get a list of shipping countries.
      description: Lists all supported delivery countries for the current store. The
        list is sorted alphabetically.
      operationId: getDeliveryCountries
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/CountryList"
            application/json:
              schema:
                $ref: "#/components/schemas/CountryList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: true
  "/{baseSiteId}/export/products":
    get:
      tags:
        - Export
      summary: Get a list of product exports.
      description: Used for product export. Depending on the timestamp parameter, it
        can return all products or only products modified after the given time.
      operationId: getExportedProducts
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: catalog
          in: query
          description: The catalog to retrieve products from. The catalog must be provided
            along with the version.
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: currentPage
          in: query
          description: The current result page requested.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: pageSize
          in: query
          description: The number of results returned per page.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 20
        - name: timestamp
          in: query
          description: When this parameter is set, only products modified after the given
            time will be returned. This parameter should be in ISO-8601 format
            (for example, 2018-01-09T16:28:45+0000).
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: version
          in: query
          description: The catalog version. The catalog version must be provided along
            with the catalog.
          required: false
          allowEmptyValue: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ProductList"
            application/json:
              schema:
                $ref: "#/components/schemas/ProductList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/feeds/orders/statusfeed":
    get:
      tags:
        - Feeds
      summary: Get a list of orders with status updates.
      description: Returns the orders that have changed status. Returns only the
        elements from the current baseSite that have been updated after the
        provided timestamp.
      operationId: getOrderStatusFeed
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: timestamp
          in: query
          description: Only items newer than the given parameter are retrieved. This
            parameter should be in ISO-8601 format (for example,
            2018-01-09T16:28:45+0000).
          required: true
          allowEmptyValue: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/OrderStatusUpdateElementList"
            application/json:
              schema:
                $ref: "#/components/schemas/OrderStatusUpdateElementList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/forgottenpasswordtokens":
    post:
      tags:
        - Forgotten Passwords
      summary: Generates a token to restore a customer's forgotten password.
      description: Generates a token to restore a customer's forgotten password.
      operationId: doRestorePassword
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: userId
          in: query
          description: Customer's user id. Customer user id is case insensitive.
          required: true
          allowEmptyValue: false
          schema:
            type: string
      responses:
        "201":
          description: Created
        "202":
          description: Accepted
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/integration/merchant_callback":
    post:
      tags:
        - Merchant Callback
      summary: Verify the decision of the Merchant
      description: >-
        Verifies the decision of the merchant. 


        Note, the “Try it out” button is not enabled for this method (always returns an error) because the Merchant Callback Controller handles parameters differently, depending on which payment provider is used. For more information about this controller, please refer to the “acceleratorocc AddOn” documentation on help.hybris.com.
      operationId: doHandleMerchantCallback
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/integration/users/{userId}/carts/{cartId}/payment/sop/response":
    post:
      tags:
        - Merchant Callback
      summary: Verify the decision of the Merchant for a cart
      description: >-
        Verifies the decision of the merchant for a specified cart, and stores
        information of the PaymentSubscriptionResult for the cart. 


        Note, the “Try it out” button is not enabled for this method (always returns an error) because the Merchant Callback Controller handles parameters differently, depending on which payment provider is used. For more information about this controller, please refer to the “acceleratorocc AddOn” documentation on help.hybris.com.
      operationId: doHandleCartMerchantCallback
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/languages":
    get:
      tags:
        - Miscs
      summary: Get a list of available languages.
      description: Lists all available languages (all languages used for a particular
        store). If the list of languages for a base store is empty, a list of
        all languages available in the system will be returned.
      operationId: getLanguages
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/LanguageList"
            application/json:
              schema:
                $ref: "#/components/schemas/LanguageList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/orders/{code}":
    get:
      tags:
        - Orders
      summary: Get a order.
      description: Returns details of a specific order based on the order GUID
        (Globally Unique Identifier) or the order CODE. The response contains
        detailed order information.
      operationId: getOrder
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: code
          in: path
          description: Order GUID (Globally Unique Identifier) or order CODE
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/paymentmodes":
    get:
      tags:
        - Payment Modes
      summary: Gets all available payment modes.
      description: Gets all payment modes defined for the base store.
      operationId: getPaymentModes
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/PaymentModeList"
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentModeList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/products/expressupdate":
    get:
      tags:
        - Products
      summary: Get products added to the express update feed.
      description: Returns products added to the express update feed. Returns only
        elements updated after the provided timestamp. The queue is cleared
        using a defined cronjob.
      operationId: getExpressUpdateProducts
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: catalog
          in: query
          description: "Only products from this catalog are returned. Format:
            catalogId:catalogVersion"
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: timestamp
          in: query
          description: Only items newer than the given parameter are retrieved from the
            queue. This parameter should be in ISO-8601 format.
          required: true
          allowEmptyValue: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ProductExpressUpdateElementList"
            application/json:
              schema:
                $ref: "#/components/schemas/ProductExpressUpdateElementList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/products/search":
    get:
      tags:
        - Products
      summary: Get a list of products and additional data
      description: Returns a list of products and additional data, such as available
        facets, available sorting, and pagination options. It can also include
        spelling suggestions. To make spelling suggestions work, you need to
        make sure that "enableSpellCheck" on the SearchQuery is set to "true"
        (by default, it should already be set to "true"). You also need to have
        indexed properties configured to be used for spellchecking.
      operationId: getProducts
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: currentPage
          in: query
          description: The current result page requested.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: pageSize
          in: query
          description: The number of results returned per page.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 20
        - name: query
          in: query
          description: "Serialized query, free text search, facets. The format of a
            serialized query:
            freeTextSearch:sort:facetKey1:facetValue1:facetKey2:facetValue2"
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: searchQueryContext
          in: query
          description: The context to be used in the search query.
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: sort
          in: query
          description: Sorting method applied to the return results.
          required: false
          allowEmptyValue: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ProductSearchPage"
            application/json:
              schema:
                $ref: "#/components/schemas/ProductSearchPage"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    head:
      tags:
        - Products
      summary: Get a header with total number of products.
      description: In the response header, the "x-total-count" indicates the total
        number of products satisfying a query.
      operationId: countProducts
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: query
          in: query
          description: "Serialized query, free text search, facets. The format of a
            serialized query:
            freeTextSearch:sort:facetKey1:facetValue1:facetKey2:facetValue2"
          required: false
          allowEmptyValue: false
          schema:
            type: string
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/products/suggestions":
    get:
      tags:
        - Products
      summary: Get a list of available suggestions
      description: Returns a list of all available suggestions related to a given term
        and limits the results to a specific value of the max parameter.
      operationId: getSuggestions
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: max
          in: query
          description: Specifies the limit of results.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: term
          in: query
          description: Specified term
          required: true
          allowEmptyValue: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/SuggestionList"
            application/json:
              schema:
                $ref: "#/components/schemas/SuggestionList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/products/{productCode}":
    get:
      tags:
        - Products
      summary: Get product details.
      description: Returns details of a single product according to a product code.
      operationId: getProduct
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: productCode
          in: path
          description: Product identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Product"
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/products/{productCode}/references":
    get:
      tags:
        - Products
      summary: Get a product reference
      description: Returns references for a product with a given product code.
        Reference type specifies which references to return.
      operationId: getProductReferences
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: pageSize
          in: query
          description: Maximum size of returned results.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 2147483647
        - name: productCode
          in: path
          description: Product identifier
          required: true
          schema:
            type: string
        - name: referenceType
          in: query
          description: Comma-separated list of reference types according to enum
            ProductReferenceTypeEnum. If not specified, all types of product
            references will be used.
          required: false
          allowEmptyValue: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ProductReferenceList"
            application/json:
              schema:
                $ref: "#/components/schemas/ProductReferenceList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/products/{productCode}/reviews":
    get:
      tags:
        - Products
      summary: Get reviews for a product
      description: Returns the reviews for a product with a given product code.
      operationId: getProductReviews
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: maxCount
          in: query
          description: Maximum count of reviews
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
        - name: productCode
          in: path
          description: Product identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ReviewList"
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    post:
      tags:
        - Products
      summary: Creates a new customer review as an anonymous user.
      description: Creates a new customer review as an anonymous user.
      operationId: createProductReview
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: productCode
          in: path
          description: Product identifier
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/Review"
          application/json:
            schema:
              $ref: "#/components/schemas/Review"
        description: "Object contains review details like : rating, alias, headline,
          comment"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Review"
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/products/{productCode}/stock":
    get:
      tags:
        - Products
      summary: Get a product's stock level.
      description: "Returns a product's stock levels sorted by distance from the
        specified location, which is provided using the free-text \"location\"
        parameter, or by using the longitude and latitude parameters. The
        following two sets of parameters are available: location (required),
        currentPage (optional), pageSize (optional); or longitude (required),
        latitude (required), currentPage (optional), pageSize(optional)."
      operationId: getLocationProductStock
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: currentPage
          in: query
          description: The current result page requested.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: latitude
          in: query
          description: Latitude location parameter.
          required: false
          allowEmptyValue: false
          schema:
            type: number
            format: double
        - name: location
          in: query
          description: Free-text location
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: longitude
          in: query
          description: Longitude location parameter.
          required: false
          allowEmptyValue: false
          schema:
            type: number
            format: double
        - name: pageSize
          in: query
          description: The number of results returned per page.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 20
        - name: productCode
          in: path
          description: Product identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/StoreFinderStockSearchPage"
            application/json:
              schema:
                $ref: "#/components/schemas/StoreFinderStockSearchPage"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    head:
      tags:
        - Products
      summary: Get header with a total number of product's stock levels.
      description: "In the response header, the \"x-total-count\" indicates the total
        number of a product's stock levels. The following two sets of parameters
        are available: location (required); or longitude (required), and
        latitude (required)."
      operationId: countProductStockByLocation
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: latitude
          in: query
          description: Latitude location parameter.
          required: false
          allowEmptyValue: false
          schema:
            type: number
            format: double
        - name: location
          in: query
          description: Free-text location
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: longitude
          in: query
          description: Longitude location parameter.
          required: false
          allowEmptyValue: false
          schema:
            type: number
            format: double
        - name: productCode
          in: path
          description: Product identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/products/{productCode}/stock/{storeName}":
    get:
      tags:
        - Products
      summary: Get a product's stock level for a store
      description: Returns a product's stock level for a particular store (in other
        words, for a particular point of sale).
      operationId: getStoreProductStock
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: productCode
          in: path
          description: Product identifier
          required: true
          schema:
            type: string
        - name: storeName
          in: path
          description: Store identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Stock"
            application/json:
              schema:
                $ref: "#/components/schemas/Stock"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/promotions":
    get:
      tags:
        - Promotions
      summary: Get a list of promotions.
      description: Returns promotions defined for a current base site. Requests
        pertaining to promotions have been developed for the previous version of
        promotions and vouchers and therefore some of them are currently not
        compatible with the new promotion engine.
      operationId: getPromotions
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: BASIC
        - name: promotionGroup
          in: query
          description: Only promotions from this group are returned
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: type
          in: query
          description: "Defines what type of promotions should be returned. Values
            supported for that parameter are: <ul><li>all: All available
            promotions are returned</li><li>product: Only product promotions are
            returned</li><li>order: Only order promotions are
            returned</li></ul>"
          required: true
          allowEmptyValue: false
          schema:
            type: string
            enum:
              - all
              - product
              - order
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/PromotionList"
            application/json:
              schema:
                $ref: "#/components/schemas/PromotionList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/promotions/{code}":
    get:
      tags:
        - Promotions
      summary: Get a promotion based on code
      description: Returns details of a single promotion specified by a promotion
        code. Requests pertaining to promotions have been developed for the
        previous version of promotions and vouchers and therefore some of them
        are currently not compatible with the new promotion engine.
      operationId: getPromotion
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: code
          in: path
          description: Promotion identifier (code)
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: BASIC
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Promotion"
            application/json:
              schema:
                $ref: "#/components/schemas/Promotion"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/resetpassword":
    post:
      tags:
        - Forgotten Passwords
      summary: Reset password after customer's clicked forgotten password link.
      description: Reset password after customer's clicked forgotten password link.
      operationId: doResetPassword
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/ResetPassword"
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPassword"
        description: Request body parameter that contains details such as token and new
          password
        required: true
      responses:
        "201":
          description: Created
        "202":
          description: Accepted
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/stores":
    get:
      tags:
        - Stores
      summary: Get a list of store locations
      description: Lists all store locations that are near the location specified in a
        query or based on latitude and longitude.
      operationId: getStoreLocations
      parameters:
        - name: accuracy
          in: query
          description: Accuracy in meters.
          required: false
          allowEmptyValue: false
          schema:
            type: number
            format: double
            default: 0
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: currentPage
          in: query
          description: The current result page requested.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: latitude
          in: query
          description: Coordinate that specifies the north-south position of a point on
            the Earth's surface.
          required: false
          allowEmptyValue: false
          schema:
            type: number
            format: double
        - name: longitude
          in: query
          description: Coordinate that specifies the east-west position of a point on the
            Earth's surface.
          required: false
          allowEmptyValue: false
          schema:
            type: number
            format: double
        - name: pageSize
          in: query
          description: The number of results returned per page.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 20
        - name: query
          in: query
          description: Location in natural language i.e. city or country.
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: radius
          in: query
          description: "Radius in meters. Max value: 40075000.0 (Earth's perimeter)."
          required: false
          allowEmptyValue: false
          schema:
            type: number
            format: double
            default: 100000
        - name: sort
          in: query
          description: Sorting method applied to the return results.
          required: false
          allowEmptyValue: false
          schema:
            type: string
            default: asc
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/StoreFinderSearchPage"
            application/json:
              schema:
                $ref: "#/components/schemas/StoreFinderSearchPage"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    head:
      tags:
        - Stores
      summary: Get a header with the number of store locations.
      description: In the response header, the "x-total-count" indicates the number of
        all store locations that are near the location specified in a query, or
        based on latitude and longitude.
      operationId: countStoreLocations
      parameters:
        - name: accuracy
          in: query
          description: Accuracy in meters.
          required: false
          allowEmptyValue: false
          schema:
            type: number
            format: double
            default: 0
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: latitude
          in: query
          description: Coordinate that specifies the north-south position of a point on
            the Earth's surface.
          required: false
          allowEmptyValue: false
          schema:
            type: number
            format: double
        - name: longitude
          in: query
          description: Coordinate that specifies the east-west position of a point on the
            Earth's surface.
          required: false
          allowEmptyValue: false
          schema:
            type: number
            format: double
        - name: query
          in: query
          description: Location in natural language i.e. city or country.
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: radius
          in: query
          description: "Radius in meters. Max value: 40075000.0 (Earth's perimeter)."
          required: false
          allowEmptyValue: false
          schema:
            type: number
            format: double
            default: 100000
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/stores/country/{countryIso}":
    get:
      tags:
        - Stores
      summary: Get a list of store locations for a given country
      description: Lists all store locations that are in the specified country.
      operationId: getStoresByCountry
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: countryIso
          in: path
          description: Country ISO code
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/PointOfServiceList"
            application/json:
              schema:
                $ref: "#/components/schemas/PointOfServiceList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/stores/country/{countryIso}/region/{regionIso}":
    get:
      tags:
        - Stores
      summary: Get a list of store locations for a given country and region
      description: Lists all store locations that are in the specified country and region.
      operationId: getStoresByCountryAndRegion
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: countryIso
          in: path
          description: Country ISO code
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: regionIso
          in: path
          description: Region ISO code
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/PointOfServiceList"
            application/json:
              schema:
                $ref: "#/components/schemas/PointOfServiceList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/stores/storescounts":
    get:
      tags:
        - Stores
      summary: Gets a store location count per country and regions
      description: Returns store counts in countries and regions
      operationId: getLocationCounts
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/StoreCountList"
            application/json:
              schema:
                $ref: "#/components/schemas/StoreCountList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/stores/{storeId}":
    get:
      tags:
        - Stores
      summary: Get a store location
      description: Returns store location based on its unique name.
      operationId: getStoreLocation
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: storeId
          in: path
          description: Store identifier (currently store name)
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/PointOfService"
            application/json:
              schema:
                $ref: "#/components/schemas/PointOfService"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/titles":
    get:
      tags:
        - Miscs
      summary: Get a list of all localized titles.
      description: Lists all localized titles.
      operationId: getTitles
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/TitleList"
            application/json:
              schema:
                $ref: "#/components/schemas/TitleList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users":
    post:
      tags:
        - Users
      summary: " Registers a customer"
      description: "Registers a customer. Requires the following parameters: login,
        password, firstName, lastName, titleCode."
      operationId: createUser
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/UserSignUp"
          application/json:
            schema:
              $ref: "#/components/schemas/UserSignUp"
        description: User's object.
        required: true
      responses:
        "201":
          description: Created
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}":
    get:
      tags:
        - Users
      summary: Get customer profile
      description: Returns customer profile.
      operationId: getUser
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    put:
      tags:
        - Users
      summary: Updates customer profile
      description: Updates customer profile. Attributes not provided in the request
        body will be defined again (set to null or default).
      operationId: replaceUser
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: User's object
        required: true
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    delete:
      tags:
        - Users
      summary: Delete customer profile.
      description: Removes customer profile.
      operationId: removeUser
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    patch:
      tags:
        - Users
      summary: Updates customer profile
      description: Updates customer profile. Only attributes provided in the request
        body will be changed.
      operationId: updateUser
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: User's object.
        required: true
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/addresses":
    get:
      tags:
        - Address
      summary: Get customer's addresses
      description: Returns customer's addresses.
      operationId: getAddresses
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/AddressList"
            application/json:
              schema:
                $ref: "#/components/schemas/AddressList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    post:
      tags:
        - Address
      summary: Creates a new address.
      description: Creates a new address.
      operationId: createAddress
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Address"
      responses:
        "201":
          description: Created
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Address"
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/addresses/verification":
    post:
      tags:
        - Address
      summary: Verifies address.
      description: Verifies address.
      operationId: validateAddress
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Address"
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/AddressValidation"
            application/json:
              schema:
                $ref: "#/components/schemas/AddressValidation"
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/addresses/{addressId}":
    get:
      tags:
        - Address
      summary: Get info about address
      description: Returns detailed information about address with a given id.
      operationId: getAddress
      parameters:
        - name: addressId
          in: path
          description: Address identifier.
          required: true
          schema:
            type: string
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Address"
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    put:
      tags:
        - Address
      summary: Updates the address
      description: Updates the address. Attributes not provided in the request will be
        defined again (set to null or default).
      operationId: replaceAddress
      parameters:
        - name: addressId
          in: path
          description: Address identifier.
          required: true
          schema:
            type: string
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Address"
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    delete:
      tags:
        - Address
      summary: Delete customer's address.
      description: Removes customer's address.
      operationId: removeAddress
      parameters:
        - name: addressId
          in: path
          description: Address identifier.
          required: true
          schema:
            type: string
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    patch:
      tags:
        - Address
      summary: Updates the address
      description: Updates the address. Only attributes provided in the request body
        will be changed.
      operationId: updateAddress
      parameters:
        - name: addressId
          in: path
          description: Address identifier.
          required: true
          schema:
            type: string
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/Address"
          application/json:
            schema:
              $ref: "#/components/schemas/Address"
        description: Address object
        required: true
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts":
    get:
      tags:
        - Carts
      summary: Get all customer carts.
      description: Lists all customer carts.
      operationId: getCarts
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: currentPage
          in: query
          description: Optional pagination parameter in case of savedCartsOnly == true.
            Default value 0.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: pageSize
          in: query
          description: Optional {@link PaginationData} parameter in case of savedCartsOnly
            == true. Default value 20.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 20
        - name: savedCartsOnly
          in: query
          description: Optional parameter. If the parameter is provided and its value is
            true, only saved carts are returned.
          required: false
          allowEmptyValue: false
          schema:
            type: boolean
            default: false
        - name: sort
          in: query
          description: Optional sort criterion in case of savedCartsOnly == true. No
            default value.
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/CartList"
            application/json:
              schema:
                $ref: "#/components/schemas/CartList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    post:
      tags:
        - Carts
      summary: Creates or restore a cart for a user.
      description: Creates a new cart or restores an anonymous cart as a user's cart
        (if an old Cart Id is given in the request).
      operationId: createCart
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: oldCartId
          in: query
          description: Anonymous cart GUID.
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: toMergeCartGuid
          in: query
          description: The GUID of the user's cart that will be merged with the anonymous
            cart.
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Created
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Cart"
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts/{cartId}":
    get:
      tags:
        - Carts
      summary: Get a cart with a given identifier.
      description: Returns the cart with a given identifier.
      operationId: getCart
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Cart"
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    delete:
      tags:
        - Carts
      summary: Deletes a cart with a given cart id.
      description: Deletes a cart with a given cart id.
      operationId: removeCart
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/delivery":
    post:
      tags:
        - Carts
      summary: Creates a delivery address for the cart.
      description: Creates an address and assigns it to the cart as the delivery address.
      operationId: createCartDeliveryAddress
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/Address"
          application/json:
            schema:
              $ref: "#/components/schemas/Address"
        description: >-
          Request body parameter that contains details such as the customer's
          first name (firstName), the customer's last name (lastName), the
          customer's title (titleCode), the customer's phone (phone), the
          country (country.isocode), the first part of the address (line1), the
          second part of the address (line2), the town (town), the postal code
          (postalCode), and the region (region.isocode).


          The DTO is in XML or .json format.
        required: true
      responses:
        "201":
          description: Created
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Address"
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    put:
      tags:
        - Carts
      summary: Sets a delivery address for the cart.
      description: Sets a delivery address for the cart. The address country must be
        placed among the delivery countries of the current base store.
      operationId: replaceCartDeliveryAddress
      parameters:
        - name: addressId
          in: query
          description: Address identifier
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    delete:
      tags:
        - Carts
      summary: Deletes the delivery address from the cart.
      description: Deletes the delivery address from the cart.
      operationId: removeCartDeliveryAddress
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts/{cartId}/clonesavedcart":
    post:
      tags:
        - Save Cart
      summary: Explicitly clones a cart.
      description: Explicitly clones a cart.
      operationId: doCartClone
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: description
          in: query
          description: The description that should be applied to the cloned cart.
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: name
          in: query
          description: The name that should be applied to the cloned cart.
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/SaveCartResult"
            application/json:
              schema:
                $ref: "#/components/schemas/SaveCartResult"
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts/{cartId}/consolidate":
    get:
      tags:
        - Extended Carts
      summary: Get consolidated pickup options.
      description: >-
        Returns a list of stores that have all the pick-up items in stock.


        Note, if there are no stores that have all the pick up items in stock, or all items are already set to the same pick up location, the response returns an empty list.
      operationId: getConsolidatedPickupLocations
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/PointOfServiceList"
            application/json:
              schema:
                $ref: "#/components/schemas/PointOfServiceList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    post:
      tags:
        - Extended Carts
      summary: Handles the consolidating pickup locations.
      description: >-
        Specifies one store location where all items will be picked up.


        Note, if any of the items are not available at the specified location, these items are removed from the cart.
      operationId: createConsolidatedPickupLocation
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: storeName
          in: query
          description: The name of the store where items will be picked up
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/CartModificationList"
            application/json:
              schema:
                $ref: "#/components/schemas/CartModificationList"
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymode":
    get:
      tags:
        - Carts
      summary: Get the delivery mode selected for the cart.
      description: Returns the delivery mode selected for the cart.
      operationId: getCartDeliveryMode
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/DeliveryMode"
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryMode"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    put:
      tags:
        - Carts
      summary: Sets the delivery mode for a cart.
      description: Sets the delivery mode with a given identifier for the cart.
      operationId: replaceCartDeliveryMode
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: deliveryModeId
          in: query
          description: Delivery mode identifier (code)
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    delete:
      tags:
        - Carts
      summary: Deletes the delivery mode from the cart.
      description: Deletes the delivery mode from the cart.
      operationId: removeCartDeliveryMode
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymodes":
    get:
      tags:
        - Carts
      summary: Get all delivery modes for the current store and delivery address.
      description: Returns all delivery modes supported for the current base store and
        cart delivery address. A delivery address must be set for the cart,
        otherwise an empty list will be returned.
      operationId: getCartDeliveryModes
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/DeliveryModeList"
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryModeList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts/{cartId}/email":
    put:
      tags:
        - Carts
      summary: Assigns an email to the cart.
      description: Assigns an email to the cart. This step is required to make a guest
        checkout.
      operationId: replaceCartGuestUser
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: email
          in: query
          description: Email of the guest user. It will be used during the checkout process.
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts/{cartId}/entries":
    get:
      tags:
        - Carts
      summary: Get cart entries.
      description: Returns cart entries.
      operationId: getCartEntries
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/OrderEntryList"
            application/json:
              schema:
                $ref: "#/components/schemas/OrderEntryList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    post:
      tags:
        - Carts
      summary: Adds a product to the cart.
      description: Adds a product to the cart.
      operationId: createCartEntry
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/OrderEntry"
          application/json:
            schema:
              $ref: "#/components/schemas/OrderEntry"
        description: >-
          Request body parameter that contains details such as the product code
          (product.code), the quantity of product (quantity), and the pickup
          store name (deliveryPointOfService.name).


          The DTO is in XML or .json format.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/CartModification"
            application/json:
              schema:
                $ref: "#/components/schemas/CartModification"
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}":
    get:
      tags:
        - Carts
      summary: Get the details of the cart entries.
      description: Returns the details of the cart entries.
      operationId: getCartEntry
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: entryNumber
          in: path
          description: The entry number. Each entry in a cart has an entry number. Cart
            entries are numbered in ascending order, starting with zero (0).
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/OrderEntry"
            application/json:
              schema:
                $ref: "#/components/schemas/OrderEntry"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    put:
      tags:
        - Carts
      summary: Set quantity and store details of a cart entry.
      description: Updates the quantity of a single cart entry and the details of the
        store where the cart entry will be picked up. Attributes not provided in
        request will be defined again (set to null or default)
      operationId: replaceCartEntry
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: entryNumber
          in: path
          description: The entry number. Each entry in a cart has an entry number. Cart
            entries are numbered in ascending order, starting with zero (0).
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/OrderEntry"
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/CartModification"
            application/json:
              schema:
                $ref: "#/components/schemas/CartModification"
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    delete:
      tags:
        - Carts
      summary: Deletes cart entry.
      description: Deletes cart entry.
      operationId: removeCartEntry
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: entryNumber
          in: path
          description: The entry number. Each entry in a cart has an entry number. Cart
            entries are numbered in ascending order, starting with zero (0).
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    patch:
      tags:
        - Carts
      summary: Update quantity and store details of a cart entry.
      description: Updates the quantity of a single cart entry and the details of the
        store where the cart entry will be picked up.
      operationId: updateCartEntry
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: entryNumber
          in: path
          description: The entry number. Each entry in a cart has an entry number. Cart
            entries are numbered in ascending order, starting with zero (0).
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/OrderEntry"
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/CartModification"
            application/json:
              schema:
                $ref: "#/components/schemas/CartModification"
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts/{cartId}/entrygroups/{entryGroupNumber}":
    post:
      tags:
        - Carts
      summary: Add a product to a cart entry group.
      description: Adds a product to a cart entry group.
      operationId: addToCartEntryGroup
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: entryGroupNumber
          in: path
          description: Each entry group in a cart has a specific entry group number. Entry
            group numbers are integers starting at one. They are defined in
            ascending order.
          required: true
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderEntry"
        description: Request body parameter that contains details such as the product
          code (product.code) and the quantity of product (quantity).
        required: true
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/CartModification"
            application/json:
              schema:
                $ref: "#/components/schemas/CartModification"
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    delete:
      tags:
        - Carts
      summary: Delete an entry group.
      description: Removes an entry group from an associated cart. The entry group is
        identified by an entryGroupNumber. The cart is identified by the cartId.
      operationId: removeCartEntryGroup
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: entryGroupNumber
          in: path
          description: Each entry group in a cart has a specific entry group number. Entry
            group numbers are integers starting at one. They are defined in
            ascending order.
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts/{cartId}/flagForDeletion":
    patch:
      tags:
        - Save Cart
      summary: Flag a cart for deletion.
      description: Flags a cart for deletion (the cart doesn't have corresponding save
        cart attributes anymore). The cart is not actually deleted from the
        database. But with the removal of the saved cart attributes, this cart
        will be taken care of by the cart removal job just like any other cart.
      operationId: doUpdateFlagForDeletion
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/SaveCartResult"
            application/json:
              schema:
                $ref: "#/components/schemas/SaveCartResult"
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/request":
    get:
      tags:
        - Extended Carts
      summary: Get information needed for create subscription
      description: Returns the necessary information for creating a subscription that
        contacts the payment provider directly. This information contains the
        payment provider URL and a list of parameters that are needed to create
        the subscription.
      operationId: getSopPaymentRequestDetails
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: extendedMerchantCallback
          in: query
          description: Define which url should be returned
          required: false
          allowEmptyValue: false
          schema:
            type: boolean
            default: false
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: responseUrl
          in: query
          description: "The URL that the payment provider uses to return payment
            information. Possible values for responseUrl include the following:
            “orderPage_cancelResponseURL”, “orderPage_declineResponseURL”, and
            “orderPage_receiptResponseURL”."
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/PaymentRequest"
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentRequest"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/response":
    get:
      tags:
        - Extended Carts
      summary: Get information about create subscription request results
      description: >-
        Returns information related to creating subscription request results. If
        there is no response from the payment provider, a "202 Accepted" status
        is returned. If the subscription is created successfully, the payment
        details are returned. Otherwise, an error response is returned.


        Note, the “Try it out” button is not enabled for this method (always returns an error) because the Extended Carts Controller handles parameters differently, depending on which payment provider is used. For more information about this controller, please refer to the “acceleratorocc AddOn” documentation on help.hybris.com.
      operationId: getSopPaymentResponse
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/PaymentDetails"
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentDetails"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    post:
      tags:
        - Extended Carts
      summary: Handles response from payment provider and create payment details
      description: >-
        Handles the response from the payment provider and creates payment
        details.


        Note, the “Try it out” button is not enabled for this method (always returns an error) because the Extended Carts Controller handles parameters differently, depending on which payment provider is used. For more information about this controller, please refer to the “acceleratorocc AddOn” documentation on help.hybris.com.
      operationId: doHandleSopPaymentResponse
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/PaymentDetails"
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentDetails"
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    delete:
      tags:
        - Extended Carts
      summary: Deletes payment provider response related to cart.
      description: Deletes the payment provider response related to the specified cart.
      operationId: removeSopPaymentResponse
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts/{cartId}/paymentdetails":
    post:
      tags:
        - Carts
      summary: Defines and assigns details of a new credit card payment to the cart.
      description: Defines the details of a new credit card, and assigns this payment
        option to the cart.
      operationId: createCartPaymentDetails
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/PaymentDetails"
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentDetails"
        description: >-
          Request body parameter that contains details such as the name on the
          card (accountHolderName), the card number (cardNumber), the card type
          (cardType.code), the month of the expiry date (expiryMonth), the year
          of the expiry date (expiryYear), whether the payment details should be
          saved (saved), whether the payment details should be set as default
          (defaultPaymentInfo), and the billing address
          (billingAddress.firstName, billingAddress.lastName,
          billingAddress.titleCode, billingAddress.country.isocode,
          billingAddress.line1, billingAddress.line2, billingAddress.town,
          billingAddress.postalCode, billingAddress.region.isocode)


          The DTO is in XML or .json format.
        required: true
      responses:
        "201":
          description: Created
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/PaymentDetails"
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentDetails"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    put:
      tags:
        - Carts
      summary: Sets credit card payment details for the cart.
      description: Sets credit card payment details for the cart.
      operationId: replaceCartPaymentDetails
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: paymentDetailsId
          in: query
          description: Payment details identifier.
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts/{cartId}/promotions":
    get:
      tags:
        - Carts
      summary: Get information about promotions applied on cart.
      description: Returns information about the promotions applied on the cart.
        Requests pertaining to promotions have been developed for the previous
        version of promotions and vouchers, and as a result, some of them are
        currently not compatible with the new promotions engine.
      operationId: getCartPromotions
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/PromotionResultList"
            application/json:
              schema:
                $ref: "#/components/schemas/PromotionResultList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    post:
      tags:
        - Carts
      summary: Enables promotions based on the promotionsId of the cart.
      description: Enables a promotion for the order based on the promotionId defined
        for the cart. Requests pertaining to promotions have been developed for
        the previous version of promotions and vouchers, and as a result, some
        of them are currently not compatible with the new promotions engine.
      operationId: doApplyCartPromotion
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: promotionId
          in: query
          description: Promotion identifier (code)
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts/{cartId}/promotions/{promotionId}":
    get:
      tags:
        - Carts
      summary: Get information about promotion applied on cart.
      description: Returns information about a promotion (with a specific
        promotionId), that has been applied on the cart. Requests pertaining to
        promotions have been developed for the previous version of promotions
        and vouchers, and as a result, some of them are currently not compatible
        with the new promotions engine.
      operationId: getCartPromotion
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: promotionId
          in: path
          description: Promotion identifier (code)
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/PromotionResultList"
            application/json:
              schema:
                $ref: "#/components/schemas/PromotionResultList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    delete:
      tags:
        - Carts
      summary: Disables the promotion based on the promotionsId of the cart.
      description: Disables the promotion for the order based on the promotionId
        defined for the cart. Requests pertaining to promotions have been
        developed for the previous version of promotions and vouchers, and as a
        result, some of them are currently not compatible with the new
        promotions engine.
      operationId: removeCartPromotion
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: promotionId
          in: path
          description: Promotion identifier (code)
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts/{cartId}/restoresavedcart":
    patch:
      tags:
        - Save Cart
      summary: Restore a saved cart.
      description: Restore a saved cart.
      operationId: doUpdateSavedCart
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/SaveCartResult"
            application/json:
              schema:
                $ref: "#/components/schemas/SaveCartResult"
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts/{cartId}/save":
    patch:
      tags:
        - Save Cart
      summary: Explicitly saves a cart.
      description: Explicitly saves a cart.
      operationId: doSaveCart
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: saveCartDescription
          in: query
          description: The description that should be applied to the saved cart.
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: saveCartName
          in: query
          description: The name that should be applied to the saved cart.
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/SaveCartResult"
            application/json:
              schema:
                $ref: "#/components/schemas/SaveCartResult"
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts/{cartId}/savedcart":
    get:
      tags:
        - Save Cart
      summary: Get a saved cart.
      description: Returns a saved cart for an authenticated user. The cart is
        identified using the "cartId" parameter.
      operationId: getSavedCart
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/SaveCartResult"
            application/json:
              schema:
                $ref: "#/components/schemas/SaveCartResult"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts/{cartId}/validate":
    post:
      tags:
        - Carts
      summary: Validates the cart
      description: Runs a cart validation and returns the result.
      operationId: validateCart
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/CartModificationList"
            application/json:
              schema:
                $ref: "#/components/schemas/CartModificationList"
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers":
    get:
      tags:
        - Carts
      summary: Get a list of vouchers applied to the cart.
      description: Returns a list of vouchers applied to the cart.
      operationId: getCartVouchers
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/VoucherList"
            application/json:
              schema:
                $ref: "#/components/schemas/VoucherList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    post:
      tags:
        - Carts
      summary: Applies a voucher based on the voucherId defined for the cart.
      description: Applies a voucher based on the voucherId defined for the cart.
      operationId: doApplyCartVoucher
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
        - name: voucherId
          in: query
          description: Voucher identifier (code)
          required: true
          allowEmptyValue: false
          schema:
            type: string
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers/{voucherId}":
    delete:
      tags:
        - Carts
      summary: Deletes a voucher defined for the current cart.
      description: Deletes a voucher based on the voucherId defined for the current cart.
      operationId: removeCartVoucher
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: path
          description: "Cart identifier: cart code for logged in user, cart guid for
            anonymous user, 'current' for the last modified cart"
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
        - name: voucherId
          in: path
          description: Voucher identifier (code)
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/consents":
    post:
      tags:
        - Consents
      summary: A user can give consent.
      operationId: doGiveConsent
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: consentTemplateId
          in: query
          description: Consent template ID.
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: consentTemplateVersion
          in: query
          description: Consent template version.
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ConsentTemplate"
            application/json:
              schema:
                $ref: "#/components/schemas/ConsentTemplate"
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/consents/{consentCode}":
    delete:
      tags:
        - Consents
      summary: Withdraw the user consent for a given consent code.
      description: If the user consent was given, the consent is withdrawn. If consent
        was already withdrawn then returns consent already withdrawn error. If
        there is no such consent then returns not found. If the current user is
        an anonymous user then returns access denied error.
      operationId: removeConsent
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: consentCode
          in: path
          description: Consent code.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/consenttemplates":
    get:
      tags:
        - Consents
      summary: Fetch the list of consents
      description: If user has not given or withdrawn consent to any of the template,
        no given or withdraw date is returned.
      operationId: getConsentTemplates
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ConsentTemplateList"
            application/json:
              schema:
                $ref: "#/components/schemas/ConsentTemplateList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/consenttemplates/{consentTemplateId}":
    get:
      tags:
        - Consents
      summary: Fetch the consent.
      description: If user has not given or withdrawn consent to the template, no
        given or withdraw date is returned.
      operationId: getConsentTemplate
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: consentTemplateId
          in: path
          description: Consent template id.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ConsentTemplate"
            application/json:
              schema:
                $ref: "#/components/schemas/ConsentTemplate"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/customercoupons":
    get:
      tags:
        - Customer Coupons
      summary: Gets all customer coupons of the current customer.
      description: Gets the customer coupon list of the current customer.
      operationId: getCustomerCouponsUsingGET
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: currentPage
          in: query
          description: The current result page requested.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: needsTotal
          in: query
          description: The flag for indicating if total number of results is needed or not.
          required: false
          allowEmptyValue: false
          schema:
            type: boolean
            enum:
              - "true"
              - "false"
            default: true
        - name: pageSize
          in: query
          description: The number of results returned per page.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: The sorting method applied to the return results.
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/CustomerCouponSearchResult"
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerCouponSearchResult"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/customercoupons/{couponCode}/claim":
    post:
      tags:
        - Customer Coupons
      summary: Claims a customer coupon.
      description: Claims a customer coupon by coupon code.
      operationId: doClaimCustomerCouponUsingPOST
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: couponCode
          in: path
          description: Coupon code
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Created
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/CustomerCoupon2Customer"
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerCoupon2Customer"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/customercoupons/{couponCode}/notification":
    post:
      tags:
        - Customer Coupons
      summary: Subscribes to a coupon notification.
      description: Make a subscription to a customer coupon to receive notifications
        when it will be in effect soon, or will expire soon.
      operationId: doSubscribeToCustomerCouponUsingPOST
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: couponCode
          in: path
          description: Coupon code
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Created
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/CustomerCouponNotification"
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerCouponNotification"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    delete:
      tags:
        - Customer Coupons
      summary: Unsubscribes from the coupon notification.
      description: Removes notification subscription from the specific customer coupon.
      operationId: doUnsubscribeFromCustomerCouponUsingDELETE
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: couponCode
          in: path
          description: Coupon code
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/customergroups":
    get:
      tags:
        - Users
      summary: Get all customer groups of a customer.
      description: Returns all customer groups of a customer.
      operationId: getUserCustomerGroups
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/UserGroupList"
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/login":
    put:
      tags:
        - Users
      summary: Changes customer's login name.
      description: Changes a customer's login name. Requires the customer's current
        password.
      operationId: replaceUserLogin
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: newLogin
          in: query
          description: Customer's new login name. Customer login is case insensitive.
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: password
          in: query
          description: Customer's current password.
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/loginnotification":
    post:
      tags:
        - Login Notification
      summary: Notify about successful login.
      description: Publish notification event about successful login.
      operationId: doPublishSuccessfulLoginEvent
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Created
        "202":
          description: Accepted
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/orderReturns":
    get:
      tags:
        - Return Requests
      summary: Gets the user's return requests history
      description: Returns order return request data associated with a specified user
        for a specified base store.
      operationId: getReturnRequests
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: currentPage
          in: query
          description: The current result page requested.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: pageSize
          in: query
          description: The number of results returned per page.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 20
        - name: sort
          in: query
          description: Sorting method applied to the return results.
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnRequestList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    post:
      tags:
        - Return Requests
      summary: Create an order return request.
      description: Creates an order return request.
      operationId: createReturnRequest
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReturnRequestEntryInputList"
        description: Return request input list for the current order.
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnRequest"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/orderReturns/{returnRequestCode}":
    get:
      tags:
        - Return Requests
      summary: Get the details of a return request.
      description: Returns specific order return request details based on a specific
        return request code. The response contains detailed order return request
        information.
      operationId: getReturnRequest
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: returnRequestCode
          in: path
          description: Order return request code
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnRequest"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    patch:
      tags:
        - Return Requests
      summary: Updates the order return request.
      description: Updates the order return request. Only cancellation of the request
        is supported by setting the attribute status to CANCELLING. Cancellation
        of the return request cannot be reverted
      operationId: updateReturnRequest
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: returnRequestCode
          in: path
          description: Order return request code
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReturnRequestModification"
        description: Return request modification object.
        required: true
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/orders":
    get:
      tags:
        - Orders
      summary: Get order history for user.
      description: Returns order history data for all orders placed by a specified
        user for a specified base store. The response can display the results
        across multiple pages, if required.
      operationId: getUserOrderHistory
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: currentPage
          in: query
          description: The current result page requested.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: pageSize
          in: query
          description: The number of results returned per page.
          required: false
          allowEmptyValue: false
          schema:
            type: integer
            format: int32
            default: 20
        - name: sort
          in: query
          description: Sorting method applied to the return results.
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: statuses
          in: query
          description: Filters only certain order statuses. For example,
            statuses=CANCELLED,CHECKED_VALID would only return orders with
            status CANCELLED or CHECKED_VALID.
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/OrderHistoryList"
            application/json:
              schema:
                $ref: "#/components/schemas/OrderHistoryList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    head:
      tags:
        - Orders
      summary: Get total number of orders.
      description: In the response header, the "x-total-count" indicates the total
        number of orders placed by a specified user for a specified base store.
      operationId: countUserOrders
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: statuses
          in: query
          description: Filters only certain order statuses. For example,
            statuses=CANCELLED,CHECKED_VALID would only return orders with
            status CANCELLED or CHECKED_VALID.
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    post:
      tags:
        - Orders
      summary: Place a order.
      description: Authorizes the cart and places the order. The response contains the
        new order data.
      operationId: placeOrder
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: cartId
          in: query
          description: Cart code for logged in user, cart GUID for guest checkout
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Created
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/orders/{code}":
    get:
      tags:
        - Orders
      summary: Get a order.
      description: Returns specific order details based on a specific order code. The
        response contains detailed order information.
      operationId: getUserOrders
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: code
          in: path
          description: Order GUID (Globally Unique Identifier) or order CODE
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/orders/{code}/cancellation":
    post:
      tags:
        - Orders
      summary: Cancel an order.
      description: Cancels an order partially or completely
      operationId: doCancelOrder
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: code
          in: path
          description: Order code
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CancellationRequestEntryInputList"
        description: Cancellation request input list for the current order.
        required: true
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/password":
    put:
      tags:
        - Users
      summary: Changes customer's password
      description: Changes customer's password.
      operationId: replaceUserPassword
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: new
          in: query
          description: New password.
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: old
          in: query
          description: Old password. Required only for ROLE_CUSTOMERGROUP
          required: false
          allowEmptyValue: false
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Created
        "202":
          description: Accepted
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/paymentdetails":
    get:
      tags:
        - Payment Details
      summary: Get customer's credit card payment details list.
      description: Return customer's credit card payment details list.
      operationId: getPaymentDetailsList
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: saved
          in: query
          description: Type of payment details.
          required: false
          allowEmptyValue: false
          schema:
            type: boolean
            default: false
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/PaymentDetailsList"
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentDetailsList"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}":
    get:
      tags:
        - Payment Details
      summary: Get customer's credit card payment details.
      description: Returns a customer's credit card payment details for the specified
        paymentDetailsId.
      operationId: getPaymentDetails
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: DEFAULT
        - name: paymentDetailsId
          in: path
          description: Payment details identifier.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/PaymentDetails"
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentDetails"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    put:
      tags:
        - Payment Details
      summary: Updates existing customer's credit card payment info.
      description: Updates existing customer's credit card payment info based on the
        payment info ID. Attributes not given in request will be defined again
        (set to null or default).
      operationId: replacePaymentDetails
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: paymentDetailsId
          in: path
          description: Payment details identifier.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/PaymentDetails"
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentDetails"
        description: Payment details object.
        required: true
      responses:
        "200":
          description: OK
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    delete:
      tags:
        - Payment Details
      summary: Deletes customer's credit card payment details.
      description: Deletes a customer's credit card payment details based on a
        specified paymentDetailsId.
      operationId: removePaymentDetails
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: paymentDetailsId
          in: path
          description: Payment details identifier.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
    patch:
      tags:
        - Payment Details
      summary: Updates existing customer's credit card payment details.
      description: Updates an existing customer's credit card payment details based on
        the specified paymentDetailsId. Only those attributes provided in the
        request will be updated.
      operationId: updatePaymentDetails
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: paymentDetailsId
          in: path
          description: Payment details identifier.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "User identifier or one of the literals : 'current' for currently
            authenticated user, 'anonymous' for anonymous user"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/PaymentDetails"
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentDetails"
        description: Payment details object
        required: true
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
  "/{baseSiteId}/vouchers/{code}":
    get:
      tags:
        - Vouchers
      summary: Get a voucher based on code.
      description: Returns details of a single voucher that is specified by its
        voucher identification code.
      operationId: getVoucher
      parameters:
        - name: baseSiteId
          in: path
          description: Base site identifier
          required: true
          schema:
            type: string
        - name: code
          in: path
          description: Voucher identifier (code)
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: "Response configuration. This is the list of fields that should be
            returned in the response body. Examples: BASIC, DEFAULT, FULL"
          required: false
          schema:
            type: string
            default: BASIC
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Voucher"
            application/json:
              schema:
                $ref: "#/components/schemas/Voucher"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - oauth2_Password: []
        - oauth2_client_credentials: []
      deprecated: false
security:
  - oauth2_Password:
      - basic
  - oauth2_client_credentials:
      - extended
x-sap-api-type: REST
x-sap-shortText: Enables you to manage all of the common commerce functionality.
x-sap-stateInfo:
  state: Active
servers:
  - templates:
      url:
        description: SAP Commerce Cloud server URL where the application is deployed.
    description: Commerce Webservices v2 REST API endpoint
    url: https://{url}/occ/v2
components:
  requestBodies:
    OrderEntry:
      content:
        application/xml:
          schema:
            $ref: "#/components/schemas/OrderEntry"
        application/json:
          schema:
            $ref: "#/components/schemas/OrderEntry"
      description: >-
        Request body parameter that contains details such as the quantity of
        product (quantity), and the pickup store name
        (deliveryPointOfService.name)


        The DTO is in XML or .json format.
      required: true
    Address:
      content:
        application/xml:
          schema:
            $ref: "#/components/schemas/Address"
        application/json:
          schema:
            $ref: "#/components/schemas/Address"
      description: Address object.
      required: true
  securitySchemes:
    oauth2_Password:
      type: oauth2
      flows:
        password:
          tokenUrl: /authorizationserver/oauth/token
          scopes:
            basic: ""
    oauth2_client_credentials:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: /authorizationserver/oauth/token
          scopes:
            extended: ""
  schemas:
    Address:
      type: object
      required:
        - firstName
        - lastName
        - line1
        - postalCode
        - titleCode
        - town
      properties:
        cellphone:
          type: string
          description: Cellphone number
        companyName:
          type: string
          description: Company Name
        country:
          $ref: "#/components/schemas/Country"
        defaultAddress:
          type: boolean
          description: Boolean flag if address is default
        district:
          type: string
          description: District name
        email:
          type: string
          description: Email address
        firstName:
          type: string
          description: First name of the address person
        formattedAddress:
          type: string
          description: Boolean flag if address is formatted
        id:
          type: string
          description: Unique id value of the address which is optional while creating new
            address. While performing other address operations this value is the
            key
        lastName:
          type: string
          description: Last name of the address person
        line1:
          type: string
          description: First line of the address
        line2:
          type: string
          description: Second line of the address
        phone:
          type: string
          description: Phone number
        postalCode:
          type: string
          description: Postal code of the address
        region:
          $ref: "#/components/schemas/Region"
        shippingAddress:
          type: boolean
          description: Boolean flag if address is for shipping
        title:
          type: string
          description: Title of the address person
        titleCode:
          type: string
          description: Code of the title
        town:
          type: string
          description: Town, field required
        visibleInAddressBook:
          type: boolean
          description: Boolean flag if address is visible in the Address Book
      title: Address
      description: Request body fields required and optional to operate on address
        data. The DTO is in XML or .json format
    AddressList:
      type: object
      properties:
        addresses:
          type: array
          description: List of addresses
          items:
            $ref: "#/components/schemas/Address"
      title: AddressList
      description: Representation of an Address list
    AddressValidation:
      type: object
      properties:
        decision:
          type: string
          description: Decision
        errors:
          $ref: "#/components/schemas/errorList"
        suggestedAddresses:
          type: array
          description: List of suggested addresses
          items:
            $ref: "#/components/schemas/Address"
      title: AddressValidation
      description: Representation of an Address Validation
    B2BApprovalProcess:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          example: accApproval
          description: Code of the Organizational Approval Process
        name:
          type: string
          example: Escalation Approval with Merchant Check
          description: Name of the Organizational Approval Process
      title: B2BApprovalProcess
      description: Representation of an organizational approval process
    B2BCostCenter:
      type: object
      properties:
        active:
          type: string
          example: true
          description: Indication of whether the cost center is active. Deprecated since
            2005. Read-only, used for display purposes.
        activeFlag:
          type: boolean
          example: true
          description: Boolean flag of whether the cost center is active.
        assignedBudgets:
          type: array
          description: Budgets assigned to this cost center
          items:
            $ref: "#/components/schemas/BudgetShallow"
        code:
          type: string
          example: Custom_Retail
          description: The code of the cost center
        currency:
          $ref: "#/components/schemas/Currency"
        name:
          type: string
          example: Custom Retail
          description: The name of the cost center
        originalCode:
          type: string
          example: Custom_Retail
          description: The original code of the cost center. Deprecated since 2005.
        unit:
          $ref: "#/components/schemas/B2BUnit"
      title: B2BCostCenter
      description: Representation of a cost center. This bean may have relationships
        to other Org Unit WsDTO, whose type are WsDTO beans as well.
    B2BCostCenterShallow:
      type: object
      properties:
        active:
          type: string
          example: true
          description: Indication of whether the cost center is active. Deprecated since
            2005. Read-only, used for display purposes.
        activeFlag:
          type: boolean
          example: true
          description: Boolean flag of whether the cost center is active.
        code:
          type: string
          example: Custom_Retail
          description: The code of the cost center
        currency:
          $ref: "#/components/schemas/Currency"
        name:
          type: string
          example: Custom Retail
          description: The name of the cost center
        originalCode:
          type: string
          example: Custom_Retail
          description: The original code of the cost center. Deprecated since 2005.
      title: B2BCostCenterShallow
      description: Representation of a cost center. This bean is shallow, which means
        its potential relationship fields to other Org Unit fields are simple
        ids. No Org Unit WsDTO fields should be declared in this bean to avoid
        circular references.
    B2BPaymentTypeData:
      type: object
      properties:
        code:
          type: string
        displayName:
          type: string
      title: B2BPaymentTypeData
    B2BUnit:
      type: object
      required:
        - uid
      properties:
        active:
          type: boolean
          example: true
          description: Boolean flag of whether Organizational Unit is active
        addresses:
          type: array
          description: Addresses of the organizational unit node
          items:
            $ref: "#/components/schemas/Address"
        administrators:
          type: array
          description: Administrators of the organizational unit node
          items:
            $ref: "#/components/schemas/User"
        approvalProcess:
          $ref: "#/components/schemas/B2BApprovalProcess"
        approvers:
          type: array
          description: Approvers of the organizational unit node
          items:
            $ref: "#/components/schemas/User"
        costCenters:
          type: array
          description: The cost centers of the organizational unit node
          items:
            $ref: "#/components/schemas/B2BCostCenterShallow"
        customers:
          type: array
          description: Customers of the organizational unit node
          items:
            $ref: "#/components/schemas/User"
        managers:
          type: array
          description: Managers of the organizational unit node
          items:
            $ref: "#/components/schemas/User"
        name:
          type: string
          example: Pronto
          description: Name of the organizational unit
        parentOrgUnit:
          $ref: "#/components/schemas/B2BUnit"
        uid:
          type: string
          example: Pronto
          description: Identifier of the organizational unit
      title: B2BUnit
      description: Representation of an organizational unit
    BaseOption:
      type: object
      properties:
        options:
          type: array
          description: List of all variant options
          items:
            $ref: "#/components/schemas/VariantOption"
        selected:
          $ref: "#/components/schemas/VariantOption"
        variantType:
          type: string
          description: Variant type of base option
      title: BaseOption
      description: Representation of a Base Ooption
    BaseSite:
      type: object
      properties:
        channel:
          type: string
          description: Channel
        defaultLanguage:
          $ref: "#/components/schemas/Language"
        defaultPreviewCatalogId:
          type: string
          description: Default preview catalog id
        defaultPreviewCategoryCode:
          type: string
          description: Default preview category code
        defaultPreviewProductCode:
          type: string
          description: Default preview product code
        locale:
          type: string
          description: Locale data for Basesite
        name:
          type: string
          description: Name of Basesite
        stores:
          type: array
          description: List of Basestores
          items:
            $ref: "#/components/schemas/BaseStore"
        theme:
          type: string
          description: Theme of Basesite
        uid:
          type: string
          description: Unique identifier of Basesite
        urlEncodingAttributes:
          type: array
          description: List of url encoding attributes
          items:
            type: string
        urlPatterns:
          type: array
          description: List of url patterns
          items:
            type: string
      title: BaseSite
      description: Representation of a Base Site
    BaseSiteList:
      type: object
      properties:
        baseSites:
          type: array
          description: List of basesites
          items:
            $ref: "#/components/schemas/BaseSite"
      title: BaseSiteList
      description: Representation of a Base Site List
    BaseStore:
      type: object
      properties:
        createReturnProcessCode:
          type: string
          description: Create return process code
        currencies:
          type: array
          description: List of currencies
          items:
            $ref: "#/components/schemas/Currency"
        defaultCurrency:
          $ref: "#/components/schemas/Currency"
        defaultDeliveryOrigin:
          $ref: "#/components/schemas/PointOfService"
        defaultLanguage:
          $ref: "#/components/schemas/Language"
        deliveryCountries:
          type: array
          description: List of delivery countries
          items:
            $ref: "#/components/schemas/Country"
        deliveryModes:
          $ref: "#/components/schemas/DeliveryModeList"
        expressCheckoutEnabled:
          type: boolean
          description: Flag specifying whether the express checkout option is enabled
        externalTaxEnabled:
          type: boolean
          description: Flag defining is external tax is enabled
        languages:
          type: array
          description: List of languages
          items:
            $ref: "#/components/schemas/Language"
        maxRadiusForPosSearch:
          type: number
          format: double
          description: Maximum radius for searching point of service
        name:
          type: string
          description: Base store name
        paymentProvider:
          type: string
          description: Payment provider
        pointsOfService:
          type: array
          description: List of points of service
          items:
            $ref: "#/components/schemas/PointOfService"
        submitOrderProcessCode:
          type: string
          description: Submit order process code
      title: BaseStore
      description: Representation of a Base Store
    Breadcrumb:
      type: object
      properties:
        facetCode:
          type: string
          description: Code of the facet
        facetName:
          type: string
          description: Name of the facet
        facetValueCode:
          type: string
          description: Value code of the facet
        facetValueName:
          type: string
          description: Value name of the facet
        removeQuery:
          $ref: "#/components/schemas/SearchState"
        truncateQuery:
          $ref: "#/components/schemas/SearchState"
      title: Breadcrumb
      description: Representation of a Breadcrumb
    BudgetShallow:
      type: object
      properties:
        active:
          type: boolean
          description: Boolean flag of whether the Budget is active
        budget:
          type: number
          example: 50000
          description: Value of Budget
        code:
          type: string
          example: Monthly_50K_USD
          description: Code of the Budget
        currency:
          $ref: "#/components/schemas/Currency"
        endDate:
          type: string
          format: date-time
          example: 2020-12-31T09:00:00+0000
          description: The end date of the Budget
        name:
          type: string
          example: Monthly 50K USD
          description: The name of the Budget
        selected:
          type: boolean
          example: true
          description: Boolean flag whether the budget is selected for a cost center
        startDate:
          type: string
          format: date-time
          example: 2020-11-31T09:00:00+0000
          description: The start date of the Budget
      title: BudgetShallow
      description: Request body fields required and optional to operate on Budget
        data. This bean is shallow, which means its potential relationship
        fields to other Org Unit fields are simple ids. No Org Unit WsDTO should
        be declared in this bean to avoid circular references.
    CancellationRequestEntryInput:
      type: object
      required:
        - orderEntryNumber
        - quantity
      properties:
        orderEntryNumber:
          type: integer
          format: int32
          example: 1
          description: Order entry number of the cancelled product
        quantity:
          type: integer
          format: int64
          example: 5
          description: Quantity of the product which belongs to the order entry and is
            requested to be cancelled
      title: CancellationRequestEntryInput
      description: Representation of a cancellation request entry input for an order
    CancellationRequestEntryInputList:
      type: object
      required:
        - cancellationRequestEntryInputs
      properties:
        cancellationRequestEntryInputs:
          type: array
          description: Cancellation request entry inputs which contain information about
            the order entries which are requested to be cancelled
          items:
            $ref: "#/components/schemas/CancellationRequestEntryInput"
      title: CancellationRequestEntryInputList
      description: Representation of a cancellation request entry input list for an order
    CardType:
      type: object
      properties:
        code:
          type: string
          description: Card type code
        name:
          type: string
          description: Card type name
      title: CardType
      description: Representation of a Card Type
    CardTypeList:
      type: object
      properties:
        cardTypes:
          type: array
          description: List of card types
          items:
            $ref: "#/components/schemas/CardType"
      title: CardTypeList
      description: Representation of a Card Type List
    Cart:
      type: object
      properties:
        appliedOrderPromotions:
          type: array
          description: List of applied order promotions
          items:
            $ref: "#/components/schemas/PromotionResult"
        appliedProductPromotions:
          type: array
          description: List of applied product promotions
          items:
            $ref: "#/components/schemas/PromotionResult"
        appliedVouchers:
          type: array
          description: List of applied vouchers
          items:
            $ref: "#/components/schemas/Voucher"
        calculated:
          type: boolean
          description: Flag showing if order is calculated
        code:
          type: string
          description: Code number of order
        costCenter:
          $ref: "#/components/schemas/B2BCostCenter"
        deliveryAddress:
          $ref: "#/components/schemas/Address"
        deliveryCost:
          $ref: "#/components/schemas/Price"
        deliveryItemsQuantity:
          type: integer
          format: int64
          description: Quantity of delivery items
        deliveryMode:
          $ref: "#/components/schemas/DeliveryMode"
        deliveryOrderGroups:
          type: array
          description: List of delivery order entries group
          items:
            $ref: "#/components/schemas/DeliveryOrderEntryGroup"
        description:
          type: string
          description: Description of the cart
        entries:
          type: array
          description: List of order entries
          items:
            $ref: "#/components/schemas/OrderEntry"
        entryGroups:
          type: array
          description: List of entry groups
          items:
            $ref: "#/components/schemas/EntryGroup"
        expirationTime:
          type: string
          format: date-time
          description: Date of cart expiration time
        guid:
          type: string
          description: Guest user id identifier
        name:
          type: string
          description: Name of the cart
        net:
          type: boolean
          description: Flag stating iv value is net-value
        orderDiscounts:
          $ref: "#/components/schemas/Price"
        paymentInfo:
          $ref: "#/components/schemas/PaymentDetails"
        paymentType:
          $ref: "#/components/schemas/B2BPaymentTypeData"
        pickupItemsQuantity:
          type: integer
          format: int64
          description: Quantity of pickup items
        pickupOrderGroups:
          type: array
          description: List of pickup order entry group
          items:
            $ref: "#/components/schemas/PickupOrderEntryGroup"
        potentialOrderPromotions:
          type: array
          description: List of potential order promotions for cart
          items:
            $ref: "#/components/schemas/PromotionResult"
        potentialProductPromotions:
          type: array
          description: List of potential product promotions for cart
          items:
            $ref: "#/components/schemas/PromotionResult"
        productDiscounts:
          $ref: "#/components/schemas/Price"
        purchaseOrderNumber:
          type: string
        saveTime:
          type: string
          format: date-time
          description: Date of saving cart
        savedBy:
          $ref: "#/components/schemas/Principal"
        site:
          type: string
          description: Site
        store:
          type: string
          description: Store
        subTotal:
          $ref: "#/components/schemas/Price"
        totalDiscounts:
          $ref: "#/components/schemas/Price"
        totalItems:
          type: integer
          format: int32
        totalPrice:
          $ref: "#/components/schemas/Price"
        totalPriceWithTax:
          $ref: "#/components/schemas/Price"
        totalTax:
          $ref: "#/components/schemas/Price"
        totalUnitCount:
          type: integer
          format: int32
          description: Total unit count
        user:
          $ref: "#/components/schemas/Principal"
      title: Cart
      description: Representation of a Cart
    CartList:
      type: object
      properties:
        carts:
          type: array
          description: List of carts
          items:
            $ref: "#/components/schemas/Cart"
      title: CartList
      description: Representation of a Cart list
    CartModification:
      type: object
      properties:
        deliveryModeChanged:
          type: boolean
          description: Delivery mode changed
        entry:
          $ref: "#/components/schemas/OrderEntry"
        quantity:
          type: integer
          format: int64
          description: Final quantity after cart modification
        quantityAdded:
          type: integer
          format: int64
          description: Quantity added with cart modification
        statusCode:
          type: string
          description: Status code of cart modification
        statusMessage:
          type: string
          description: Status message
      title: CartModification
      description: Representation of a Cart modification
    CartModificationList:
      type: object
      properties:
        cartModifications:
          type: array
          description: List of cart modifications
          items:
            $ref: "#/components/schemas/CartModification"
      title: CartModificationList
      description: Representation of a Cart modification list
    Catalog:
      type: object
      properties:
        catalogVersions:
          type: array
          description: List of versions of catalog
          items:
            $ref: "#/components/schemas/CatalogVersion"
        id:
          type: string
          description: Identifier of abstract catalog item
        lastModified:
          type: string
          format: date-time
          description: Date of last modification
        name:
          type: string
          description: Name of abstract catalog item
        url:
          type: string
          description: Url address of abstract catalog item
      title: Catalog
      description: Representation of an Catalog
    CatalogList:
      type: object
      properties:
        catalogs:
          type: array
          description: List of catalog items
          items:
            $ref: "#/components/schemas/Catalog"
      title: CatalogList
      description: Representation of a Catalog List
    CatalogVersion:
      type: object
      properties:
        categories:
          type: array
          description: List of category hierarchies
          items:
            $ref: "#/components/schemas/CategoryHierarchy"
        id:
          type: string
          description: Identifier of abstract catalog item
        lastModified:
          type: string
          format: date-time
          description: Date of last modification
        name:
          type: string
          description: Name of abstract catalog item
        url:
          type: string
          description: Url address of abstract catalog item
      title: CatalogVersion
      description: Representation of a Catalog Version
    Category:
      type: object
      properties:
        code:
          type: string
          description: Code of the category
        image:
          $ref: "#/components/schemas/Image"
        name:
          type: string
          description: Name of the category
        url:
          type: string
          description: URL of the category
      title: Category
      description: Representation of a Category
    CategoryHierarchy:
      type: object
      properties:
        id:
          type: string
          description: Identifier of abstract catalog item
        lastModified:
          type: string
          format: date-time
          description: Date of last modification
        name:
          type: string
          description: Name of abstract catalog item
        products:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        subcategories:
          type: array
          description: List of subcategory hierarchies
          items:
            $ref: "#/components/schemas/CategoryHierarchy"
        url:
          type: string
          description: Url address of abstract catalog item
      title: CategoryHierarchy
      description: Representation of a Category Hierarchy
    Classification:
      type: object
      properties:
        code:
          type: string
          description: Code of the classification
        features:
          type: array
          description: List of features for given classification
          items:
            $ref: "#/components/schemas/Feature"
        name:
          type: string
          description: Name of the classification
      title: Classification
      description: Representation of a Classification
    ComponentAdaptedData:
      type: object
      title: ComponentAdaptedData
    ComponentIDList:
      type: object
      properties:
        idList:
          type: array
          items:
            type: string
      title: ComponentIDList
    ConfigurationInfo:
      type: object
      properties:
        configurationLabel:
          type: string
          description: Label of configuration info
        configurationValue:
          type: string
          description: Value of configuration info
        configuratorType:
          type: string
          description: Type of configuration info
        status:
          type: string
          description: Status of configuration info
      title: ConfigurationInfo
      description: Representation of a Configuration Info
    Consent:
      type: object
      properties:
        code:
          type: string
          description: Code of consent
        consentGivenDate:
          type: string
          format: date-time
          description: Date of consenting
        consentWithdrawnDate:
          type: string
          format: date-time
          description: Consent withdrawn date
      title: Consent
      description: Representation of a Consent
    ConsentTemplate:
      type: object
      properties:
        currentConsent:
          $ref: "#/components/schemas/Consent"
        description:
          type: string
          description: Consent template description
        id:
          type: string
          description: Consent template identifier
        name:
          type: string
          description: Consent template name
        version:
          type: integer
          format: int32
          description: Consent template version
      title: ConsentTemplate
      description: Representation of a Consent Template
    ConsentTemplateList:
      type: object
      properties:
        consentTemplates:
          type: array
          description: List of consent templates
          items:
            $ref: "#/components/schemas/ConsentTemplate"
      title: ConsentTemplateList
      description: Representation of a Consent Template List
    Consignment:
      type: object
      properties:
        code:
          type: string
          description: Consignment code
        deliveryMode:
          $ref: "#/components/schemas/DeliveryMode"
        deliveryPointOfService:
          $ref: "#/components/schemas/PointOfService"
        entries:
          type: array
          description: List of consignment entries
          items:
            $ref: "#/components/schemas/ConsignmentEntry"
        orderCode:
          type: string
        packagingInfo:
          $ref: "#/components/schemas/PackagingInfo"
        shippingAddress:
          $ref: "#/components/schemas/Address"
        shippingDate:
          type: string
          format: date-time
        status:
          type: string
          description: Consignment status
        statusDate:
          type: string
          format: date-time
          description: Consignment status date
        statusDisplay:
          type: string
          description: Consignment status display
        trackingID:
          type: string
          description: Consignment tracking identifier
        warehouseCode:
          type: string
      title: Consignment
      description: Representation of a Consignment
    ConsignmentEntry:
      type: object
      properties:
        orderEntry:
          $ref: "#/components/schemas/OrderEntry"
        quantity:
          type: integer
          format: int64
          description: Quantity value of Consignment entry
        quantityDeclined:
          type: integer
          format: int64
        quantityPending:
          type: integer
          format: int64
        quantityShipped:
          type: integer
          format: int64
        shippedQuantity:
          type: integer
          format: int64
          description: Shipped quantity
      title: ConsignmentEntry
      description: Representation of a Consignment Entry
    Country:
      type: object
      properties:
        isocode:
          type: string
          description: Country code in iso format
        name:
          type: string
          description: Name of the country
      title: Country
      description: Response body fields which will be returned while fetching the list
        of countries. The DTO is in XML or .json format
    CountryList:
      type: object
      properties:
        countries:
          type: array
          description: This is the list of Country fields that should be returned in the
            response body
          items:
            $ref: "#/components/schemas/Country"
      title: CountryList
      description: List of countries
    Currency:
      type: object
      properties:
        active:
          type: boolean
          description: Boolean flag whether currency is active
        isocode:
          type: string
          description: Code of the currency in iso format
        name:
          type: string
          description: Name of the currency
        symbol:
          type: string
          description: Symbol of the currency
      title: Currency
      description: Representation of a Currency
    CurrencyList:
      type: object
      properties:
        currencies:
          type: array
          description: List of currencies
          items:
            $ref: "#/components/schemas/Currency"
      title: CurrencyList
      description: Representation of a Currency List
    CustomerCoupon:
      type: object
      properties:
        allProductsApplicable:
          type: boolean
          description: Indicates whether the coupon is applicable for all products
        couponId:
          type: string
          description: Coupon identifier
        description:
          type: string
          description: Description of the coupon
        endDate:
          type: string
          format: date-time
          description: End date of the coupon
        name:
          type: string
          description: Name of the coupon
        notificationOn:
          type: boolean
          description: Indicates if notification is enabled or disabled
        startDate:
          type: string
          format: date-time
          description: Start date of the coupon
        status:
          type: string
          example: Effective
          description: Status of the coupon
      title: CustomerCoupon
      description: Customer coupon
    CustomerCoupon2Customer:
      type: object
      properties:
        coupon:
          $ref: "#/components/schemas/CustomerCoupon"
        customer:
          $ref: "#/components/schemas/User"
      title: CustomerCoupon2Customer
      description: Customer coupon for customer
    CustomerCouponNotification:
      type: object
      properties:
        coupon:
          $ref: "#/components/schemas/CustomerCoupon"
        customer:
          $ref: "#/components/schemas/User"
        status:
          type: string
          example: EFFECTIVESENT
          description: Notification status
      title: CustomerCouponNotification
      description: Customer coupon notification
    CustomerCouponSearchResult:
      type: object
      properties:
        coupons:
          type: array
          description: List of coupon
          items:
            $ref: "#/components/schemas/CustomerCoupon"
        pagination:
          $ref: "#/components/schemas/pagination"
        sorts:
          type: array
          description: Sorting information
          items:
            $ref: "#/components/schemas/sort"
      title: CustomerCouponSearchResult
      description: Customer coupon search result
    DeliveryMode:
      type: object
      properties:
        code:
          type: string
          description: Code of the delivery mode
        deliveryCost:
          $ref: "#/components/schemas/Price"
        description:
          type: string
          description: Description of the delivery mode
        name:
          type: string
          description: Name of the delivery mode
      title: DeliveryMode
      description: Representation of a Delivery mode
    DeliveryModeList:
      type: object
      properties:
        deliveryModes:
          type: array
          description: List of delivery modes
          items:
            $ref: "#/components/schemas/DeliveryMode"
      title: DeliveryModeList
      description: Representation of a Delivery mode list
    DeliveryOrderEntryGroup:
      type: object
      properties:
        deliveryAddress:
          $ref: "#/components/schemas/Address"
        entries:
          type: array
          description: List of order entries
          items:
            $ref: "#/components/schemas/OrderEntry"
        quantity:
          type: integer
          format: int64
          description: Quantity of order entries in a group
        totalPriceWithTax:
          $ref: "#/components/schemas/Price"
      title: DeliveryOrderEntryGroup
      description: Representation of a Delivery Order Entry Group
    EntryGroup:
      type: object
      properties:
        entries:
          type: array
          description: List of order entries
          items:
            $ref: "#/components/schemas/OrderEntry"
        entryGroupNumber:
          type: integer
          format: int32
          example: 1
          description: Identifier of the entry group
        entryGroups:
          type: array
          description: List of child entry groups
          items:
            $ref: "#/components/schemas/EntryGroup"
        erroneous:
          type: boolean
          example: true
          description: Indicates if the entry group is in an error state
        label:
          type: string
          example: Photo On The Go Package
          description: Label for the entry group
        type:
          type: string
          example: STANDALONE
          description: Indicates type of the group, possible values are STANDALONE,
            CONFIGURABLEBUNDLE or any customer implemented type for any new
            provider
      title: EntryGroup
      description: Representation of an Entry Group
    Facet:
      type: object
      properties:
        category:
          type: boolean
          description: Flag stating if facet is category facet
        multiSelect:
          type: boolean
          description: Flag stating if facet is multiSelect
        name:
          type: string
          description: Name of the facet
        priority:
          type: integer
          format: int32
          description: Priority value of the facet
        topValues:
          type: array
          description: List of top facet values
          items:
            $ref: "#/components/schemas/FacetValue"
        values:
          type: array
          description: List of all facet values
          items:
            $ref: "#/components/schemas/FacetValue"
        visible:
          type: boolean
          description: Flag stating if facet is visible
      title: Facet
      description: Representation of a Facet
    FacetValue:
      type: object
      properties:
        count:
          type: integer
          format: int64
          description: Count of the facet value
        name:
          type: string
          description: Name of the facet value
        query:
          $ref: "#/components/schemas/SearchState"
        selected:
          type: boolean
          description: Flag stating if facet value is selected
      title: FacetValue
      description: Representation of a Facet Value
    Feature:
      type: object
      properties:
        code:
          type: string
          description: Code of the feature
        comparable:
          type: boolean
          description: Flag defining it feature is comparable
        description:
          type: string
          description: Description of the feature
        featureUnit:
          $ref: "#/components/schemas/FeatureUnit"
        featureValues:
          type: array
          description: List of feature values
          items:
            $ref: "#/components/schemas/FeatureValue"
        name:
          type: string
          description: Name of the feature
        range:
          type: boolean
          description: Range number of the reature
        type:
          type: string
          description: Type of the feature
      title: Feature
      description: Representation of a Feature
    FeatureUnit:
      type: object
      properties:
        name:
          type: string
          description: Name of the feature unit
        symbol:
          type: string
          description: Symbol of the feature unit
        unitType:
          type: string
          description: Type of the feature unit
      title: FeatureUnit
      description: Representation of a Feature Unit
    FeatureValue:
      type: object
      properties:
        value:
          type: string
          description: Value of the feature
      title: FeatureValue
      description: Representation of a Feature Value
    FutureStock:
      type: object
      properties:
        date:
          type: string
          format: date-time
          description: Date of future stock
        formattedDate:
          type: string
          description: Date of future stock expressed in text value
        stock:
          $ref: "#/components/schemas/Stock"
      title: FutureStock
      description: Representation of a Future Stock
    GeoPoint:
      type: object
      properties:
        latitude:
          type: number
          format: double
          description: Geopoint latitude
        longitude:
          type: number
          format: double
          description: Geopoint longitude
      title: GeoPoint
      description: Representation of a GeoPoint
    Image:
      type: object
      properties:
        altText:
          type: string
          description: Tooltip content which is visible while image mouse hovering
        format:
          type: string
          description: Format of the image, can be zoom, product, thumbnail, store,
            cartIcon, etc.
        galleryIndex:
          type: integer
          format: int32
          description: Index of the image while displayed in gallery
        imageType:
          type: string
          description: Type of the image, can be PRIMARY or GALLERY
          enum:
            - PRIMARY
            - GALLERY
        url:
          type: string
          description: URL address of the image
      title: Image
      description: Representation of an Image
    Language:
      type: object
      properties:
        active:
          type: boolean
          description: true/false indicator when the language is active
        isocode:
          type: string
          description: iso code of the language
        name:
          type: string
          description: name of the language
        nativeName:
          type: string
          description: name the language in native form
      title: Language
      description: Representation of a Language
    LanguageList:
      type: object
      properties:
        languages:
          type: array
          description: This is the list of Language fields that should be returned in the
            response body
          items:
            $ref: "#/components/schemas/Language"
      title: LanguageList
      description: Lists all available languages (all languages used for a particular
        store). If the list of languages for a base store is empty, a list of
        all languages available in the system will be returned
    ListAdaptedComponents:
      type: object
      properties:
        component:
          type: array
          items:
            $ref: "#/components/schemas/ComponentAdaptedData"
        pagination:
          $ref: "#/components/schemas/pagination"
        sorts:
          type: array
          items:
            $ref: "#/components/schemas/sort"
      title: ListAdaptedComponents
    ListAdaptedPages:
      type: object
      properties:
        page:
          type: array
          items:
            $ref: "#/components/schemas/PageAdaptedData"
        pagination:
          $ref: "#/components/schemas/pagination"
        sorts:
          type: array
          items:
            $ref: "#/components/schemas/sort"
      title: ListAdaptedPages
      xml:
        name: pages
        attribute: false
        wrapped: false
    MemberList:
      type: object
      properties:
        members:
          type: array
          description: List of member
          items:
            $ref: "#/components/schemas/Principal"
      title: MemberList
      description: Representation of a Member List
    OpeningSchedule:
      type: object
      properties:
        code:
          type: string
          description: Code of the opening schedule
        name:
          type: string
          description: Name of the opening schedule
        specialDayOpeningList:
          type: array
          description: List of special opening days
          items:
            $ref: "#/components/schemas/SpecialOpeningDay"
        weekDayOpeningList:
          type: array
          description: List of weekday opening days
          items:
            $ref: "#/components/schemas/WeekdayOpeningDay"
      title: OpeningSchedule
      description: Representation of an Opening schedule
    Order:
      type: object
      properties:
        appliedOrderPromotions:
          type: array
          description: List of applied order promotions
          items:
            $ref: "#/components/schemas/PromotionResult"
        appliedProductPromotions:
          type: array
          description: List of applied product promotions
          items:
            $ref: "#/components/schemas/PromotionResult"
        appliedVouchers:
          type: array
          description: List of applied vouchers
          items:
            $ref: "#/components/schemas/Voucher"
        calculated:
          type: boolean
          description: Flag showing if order is calculated
        cancellable:
          type: boolean
          example: true
          description: Boolean flag showing if order is cancellable
        code:
          type: string
          description: Code number of order
        consignments:
          type: array
          description: List of consignment
          items:
            $ref: "#/components/schemas/Consignment"
        costCenter:
          $ref: "#/components/schemas/B2BCostCenter"
        created:
          type: string
          format: date-time
          description: Date of order creation
        deliveryAddress:
          $ref: "#/components/schemas/Address"
        deliveryCost:
          $ref: "#/components/schemas/Price"
        deliveryItemsQuantity:
          type: integer
          format: int64
          description: Quantity of delivery items
        deliveryMode:
          $ref: "#/components/schemas/DeliveryMode"
        deliveryOrderGroups:
          type: array
          description: List of delivery order entries group
          items:
            $ref: "#/components/schemas/DeliveryOrderEntryGroup"
        deliveryStatus:
          type: string
          description: Order delivery status
        deliveryStatusDisplay:
          type: string
          description: Order delivery status display
        entries:
          type: array
          description: List of order entries
          items:
            $ref: "#/components/schemas/OrderEntry"
        entryGroups:
          type: array
          description: List of entry groups
          items:
            $ref: "#/components/schemas/EntryGroup"
        guestCustomer:
          type: boolean
          description: Flag showing if customer is Guest customer
        guid:
          type: string
          description: Guest user id identifier
        net:
          type: boolean
          description: Flag stating iv value is net-value
        orderDiscounts:
          $ref: "#/components/schemas/Price"
        orgCustomer:
          $ref: "#/components/schemas/User"
        paymentAddress:
          $ref: "#/components/schemas/Address"
        paymentInfo:
          $ref: "#/components/schemas/PaymentDetails"
        permissionResults:
          type: array
          description: Results of permissions associated with the order
          items:
            $ref: "#/components/schemas/OrderApprovalPermissionResult"
        pickupItemsQuantity:
          type: integer
          format: int64
          description: Quantity of pickup items
        pickupOrderGroups:
          type: array
          description: List of pickup order entry group
          items:
            $ref: "#/components/schemas/PickupOrderEntryGroup"
        productDiscounts:
          $ref: "#/components/schemas/Price"
        purchaseOrderNumber:
          type: string
          description: Purchase order number
        returnable:
          type: boolean
          example: true
          description: Boolean flag showing if order is returnable
        site:
          type: string
          description: Site
        status:
          type: string
          description: Status of order
        statusDisplay:
          type: string
          description: Status display
        store:
          type: string
          description: Store
        subTotal:
          $ref: "#/components/schemas/Price"
        totalDiscounts:
          $ref: "#/components/schemas/Price"
        totalItems:
          type: integer
          format: int32
        totalPrice:
          $ref: "#/components/schemas/Price"
        totalPriceWithTax:
          $ref: "#/components/schemas/Price"
        totalTax:
          $ref: "#/components/schemas/Price"
        totalUnitCount:
          type: integer
          format: int32
        unconsignedEntries:
          type: array
          description: List of unconsigned order entries
          items:
            $ref: "#/components/schemas/OrderEntry"
        user:
          $ref: "#/components/schemas/Principal"
      title: Order
      description: Representation of an Order
    OrderApprovalPermissionResult:
      type: object
      properties:
        approverName:
          type: string
          description: Name of the approver responsible for this permission result.
        approverNotes:
          type: string
          example: The order is rejected due to insufficient budget
          description: Any comments the approver added to the approval item.
        permissionType:
          $ref: "#/components/schemas/OrderApprovalPermissionType"
        statusDisplay:
          type: string
          example: Pending approval
          description: Status of the order approval.
      title: OrderApprovalPermissionResult
      description: Details of an order approval permission result related to an order
    OrderApprovalPermissionType:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          example: B2BOrderThresholdTimespanPermission
          description: Code of the Order Approval Permission Type
        name:
          type: string
          example: Allowed Order Threshold (per timespan)
          description: Name of the Order Approval Permission Type
      title: OrderApprovalPermissionType
      description: "Request body fields required and optional to operate on Order
        Approval Permission Type data. Typical permission types are:
        B2BBudgetExceededPermission, B2BOrderThresholdTimespanPermission and
        B2BOrderThresholdPermission"
    OrderEntry:
      type: object
      properties:
        basePrice:
          $ref: "#/components/schemas/Price"
        cancellableQuantity:
          type: integer
          format: int64
          example: 5
          description: Quantity number of cancellable items in order entry
        cancelledItemsPrice:
          $ref: "#/components/schemas/Price"
        configurationInfos:
          type: array
          description: Configuration info of order entry
          items:
            $ref: "#/components/schemas/ConfigurationInfo"
        deliveryMode:
          $ref: "#/components/schemas/DeliveryMode"
        deliveryPointOfService:
          $ref: "#/components/schemas/PointOfService"
        entryNumber:
          type: integer
          format: int32
          description: Entry number of the order entry
        product:
          $ref: "#/components/schemas/Product"
        quantity:
          type: integer
          format: int64
          description: Quantity number of items in order entry
        quantityAllocated:
          type: integer
          format: int64
        quantityCancelled:
          type: integer
          format: int64
        quantityPending:
          type: integer
          format: int64
        quantityReturned:
          type: integer
          format: int64
        quantityShipped:
          type: integer
          format: int64
        quantityUnallocated:
          type: integer
          format: int64
        returnableQuantity:
          type: integer
          format: int64
          example: 5
          description: Quantity number of returnable items in order entry
        returnedItemsPrice:
          $ref: "#/components/schemas/Price"
        statusSummaryList:
          type: array
          description: List of aggregated status information per entry, relevant if the
            entry is configurable and its configuration contains one or many
            issues in different severities. Note that configurators typically
            raise such issues only in case the parent document is changeable. In
            this case the issues (depending on their severity) need to be fixed
            before a checkout can be done. This means this segment can be
            present for a cart entry, for order entries it will always be empty
          items:
            $ref: "#/components/schemas/StatusSummary"
        totalPrice:
          $ref: "#/components/schemas/Price"
        updateable:
          type: boolean
          description: Flag defining if order entry item is updateable
        url:
          type: string
      title: OrderEntry
      description: Representation of an Order entry
    OrderEntryList:
      type: object
      properties:
        orderEntries:
          type: array
          description: List of order entries
          items:
            $ref: "#/components/schemas/OrderEntry"
      title: OrderEntryList
      description: Representation of an Order entry list consumed
    OrderHistory:
      type: object
      properties:
        code:
          type: string
          description: Code of Order History
        costCenter:
          $ref: "#/components/schemas/B2BCostCenter"
        guid:
          type: string
          description: Guest user identifier
        placed:
          type: string
          format: date-time
          description: Date of placing order
        purchaseOrderNumber:
          type: string
          description: Purchase order number
        status:
          type: string
          description: Status of Order History
        statusDisplay:
          type: string
          description: Status display
        total:
          $ref: "#/components/schemas/Price"
      title: OrderHistory
      description: Representation of an Order History
    OrderHistoryList:
      type: object
      properties:
        orders:
          type: array
          description: List of order history items
          items:
            $ref: "#/components/schemas/OrderHistory"
        pagination:
          $ref: "#/components/schemas/deprecatedPagination"
        sorts:
          type: array
          description: List of sorts
          items:
            $ref: "#/components/schemas/Sort"
      title: OrderHistoryList
      description: Representation of an Order History List
    OrderStatusUpdateElement:
      type: object
      properties:
        baseSiteId:
          type: string
          description: BaseSite identifier
        code:
          type: string
          description: Code of update element of order status
        status:
          type: string
          description: Status of update element
      title: OrderStatusUpdateElement
      description: Representation of an Order Status Update Element
    OrderStatusUpdateElementList:
      type: object
      properties:
        orderStatusUpdateElements:
          type: array
          description: List of order status update elements
          items:
            $ref: "#/components/schemas/OrderStatusUpdateElement"
      title: OrderStatusUpdateElementList
      description: Representation of an Order Status Update Element List
    PackagingInfo:
      type: object
      properties:
        dimensionUnit:
          type: string
        grossWeight:
          type: string
        height:
          type: string
        insuredValue:
          type: string
        length:
          type: string
        weightUnit:
          type: string
        width:
          type: string
      title: PackagingInfo
    PageAdaptedData:
      type: object
      title: PageAdaptedData
    PaymentDetails:
      type: object
      properties:
        accountHolderName:
          type: string
          description: Name of account holder
        billingAddress:
          $ref: "#/components/schemas/Address"
        cardNumber:
          type: string
          description: Payment card number
        cardType:
          $ref: "#/components/schemas/CardType"
        defaultPayment:
          type: boolean
          description: Flag to mark if payment the default one
        expiryMonth:
          type: string
          description: Month of expiration of payment
        expiryYear:
          type: string
          description: Year of expiration of payment
        id:
          type: string
          description: Unique identifier of payment detail
        issueNumber:
          type: string
          description: Issue number
        saved:
          type: boolean
          description: Flag to mark if payment is saved one
        startMonth:
          type: string
          description: Start month from which payment is valid
        startYear:
          type: string
          description: Start year from which payment is valid
        subscriptionId:
          type: string
          description: Identifier of subscription
      title: PaymentDetails
      description: Representation of a Payment Details
    PaymentDetailsList:
      type: object
      properties:
        payments:
          type: array
          description: List of payment details
          items:
            $ref: "#/components/schemas/PaymentDetails"
      title: PaymentDetailsList
      description: Representation of a Payment details list
    PaymentMode:
      type: object
      properties:
        code:
          type: string
          description: Payment mode code
        description:
          type: string
          description: Payment mode description
        name:
          type: string
          description: Payment mode name
      title: PaymentMode
      description: Representation of a Payment Mode
    PaymentModeList:
      type: object
      properties:
        paymentModes:
          type: array
          description: List of payment modes
          items:
            $ref: "#/components/schemas/PaymentMode"
      title: PaymentModeList
      description: Representation of a Payment Mode List
    PaymentRequest:
      type: object
      properties:
        mappingLabels:
          type: object
          additionalProperties:
            type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        postUrl:
          type: string
      title: PaymentRequest
    PickupOrderEntryGroup:
      type: object
      properties:
        deliveryPointOfService:
          $ref: "#/components/schemas/PointOfService"
        distance:
          type: number
          format: double
          description: Distance calculated to pickup place
        entries:
          type: array
          description: List of order entries
          items:
            $ref: "#/components/schemas/OrderEntry"
        quantity:
          type: integer
          format: int64
          description: Quantity of order entries in a group
        totalPriceWithTax:
          $ref: "#/components/schemas/Price"
      title: PickupOrderEntryGroup
      description: Representation of a Pickup Order Entry Group
    PointOfService:
      type: object
      properties:
        address:
          $ref: "#/components/schemas/Address"
        description:
          type: string
          description: Description of the point of service
        displayName:
          type: string
          description: Display name of the point of service
        distanceKm:
          type: number
          format: double
          description: Distance to the point of service as number value
        features:
          type: object
          description: List of features for a given point of service
          additionalProperties:
            type: string
        formattedDistance:
          type: string
          description: Distance to the point of service as text value
        geoPoint:
          $ref: "#/components/schemas/GeoPoint"
        mapIcon:
          $ref: "#/components/schemas/Image"
        name:
          type: string
          description: Name of the point of service
        openingHours:
          $ref: "#/components/schemas/OpeningSchedule"
        storeContent:
          type: string
          description: Store content of given point of service
        storeImages:
          type: array
          description: Collection of images associated with a point of service
          items:
            $ref: "#/components/schemas/Image"
        url:
          type: string
          description: Url address of the point of service
        warehouseCodes:
          type: array
          items:
            type: string
      title: PointOfService
      description: Representation of a Point of service
    PointOfServiceList:
      type: object
      properties:
        pointOfServices:
          type: array
          description: List of points of service
          items:
            $ref: "#/components/schemas/PointOfService"
      title: PointOfServiceList
      description: Representation of a Point of Service List
    PointOfServiceStock:
      type: object
      properties:
        address:
          $ref: "#/components/schemas/Address"
        description:
          type: string
          description: Description of the point of service
        displayName:
          type: string
          description: Display name of the point of service
        distanceKm:
          type: number
          format: double
          description: Distance to the point of service as number value
        features:
          type: object
          description: List of features for a given point of service
          additionalProperties:
            type: string
        formattedDistance:
          type: string
          description: Distance to the point of service as text value
        geoPoint:
          $ref: "#/components/schemas/GeoPoint"
        mapIcon:
          $ref: "#/components/schemas/Image"
        name:
          type: string
          description: Name of the point of service
        openingHours:
          $ref: "#/components/schemas/OpeningSchedule"
        stockInfo:
          $ref: "#/components/schemas/Stock"
        storeContent:
          type: string
          description: Store content of given point of service
        storeImages:
          type: array
          description: Collection of images associated with a point of service
          items:
            $ref: "#/components/schemas/Image"
        url:
          type: string
          description: Url address of the point of service
        warehouseCodes:
          type: array
          items:
            type: string
      title: PointOfServiceStock
      description: Representation of a Point Of Service Stock
    Price:
      type: object
      properties:
        currencyIso:
          type: string
          description: Currency iso format
        formattedValue:
          type: string
          description: Value of price formatted
        maxQuantity:
          type: integer
          format: int64
          description: Maximum quantity of the price value
        minQuantity:
          type: integer
          format: int64
          description: Minimum quantity of the price value
        priceType:
          type: string
          description: Type of the price
          enum:
            - BUY
            - FROM
        value:
          type: number
          description: Value of price in BigDecimal format
      title: Price
      description: Representation of a Price
    PriceRange:
      type: object
      properties:
        maxPrice:
          $ref: "#/components/schemas/Price"
        minPrice:
          $ref: "#/components/schemas/Price"
      title: PriceRange
      description: Representation of a Price Range
    Principal:
      type: object
      properties:
        name:
          type: string
          description: Name of the user
        uid:
          type: string
          description: Unique user identifier
      title: Principal
      description: Representation of a Principal webservice DTO used for defining User
        data types
    Product:
      type: object
      properties:
        availableForPickup:
          type: boolean
          description: Flag defining if product is available for pickup
        averageRating:
          type: number
          format: double
          description: Rating number of average value
        baseOptions:
          type: array
          description: List of base options related to the product
          items:
            $ref: "#/components/schemas/BaseOption"
        baseProduct:
          type: string
          description: Information about base product
        categories:
          type: array
          description: List of categories product belongs to
          items:
            $ref: "#/components/schemas/Category"
        classifications:
          type: array
          description: List of classifications related to the product
          items:
            $ref: "#/components/schemas/Classification"
        code:
          type: string
          description: Code of the product
        configurable:
          type: boolean
          description: Flag stating if product is configurable
        configuratorType:
          type: string
          description: Configurator type related to the product
        description:
          type: string
          description: Description of the product
        firstVariantCode:
          type: string
        firstVariantImage:
          type: string
        futureStocks:
          type: array
          description: List of future stocks
          items:
            $ref: "#/components/schemas/FutureStock"
        images:
          type: array
          description: List of images linked to product
          items:
            $ref: "#/components/schemas/Image"
        manufacturer:
          type: string
          description: Data of product manufacturer
        multidimensional:
          type: boolean
          description: Flag stating if product is multidimentional
        name:
          type: string
          description: Name of the product
        numberOfReviews:
          type: integer
          format: int32
          description: Number of reviews associated with the product
        potentialPromotions:
          type: array
          description: List of potential promotions related to the product
          items:
            $ref: "#/components/schemas/Promotion"
        price:
          $ref: "#/components/schemas/Price"
        priceRange:
          $ref: "#/components/schemas/PriceRange"
        productReferences:
          type: array
          description: List of product references
          items:
            $ref: "#/components/schemas/ProductReference"
        purchasable:
          type: boolean
          description: Flag defining if product is purchasable
        reviews:
          type: array
          description: List of reviews associated with the product
          items:
            $ref: "#/components/schemas/Review"
        stock:
          $ref: "#/components/schemas/Stock"
        summary:
          type: string
          description: Product summary
        tags:
          type: array
          description: Tags associated with the product
          items:
            type: string
        url:
          type: string
          description: Url address of the product
        variantMatrix:
          type: array
          description: List of variant matrixes associated with the product
          items:
            $ref: "#/components/schemas/VariantMatrixElement"
        variantOptions:
          type: array
          description: List of variant options related to the product
          items:
            $ref: "#/components/schemas/VariantOption"
        variantType:
          type: string
          description: Variant type of the product
        volumePrices:
          type: array
          description: List of volume prices
          items:
            $ref: "#/components/schemas/Price"
        volumePricesFlag:
          type: boolean
          description: Flag stating if volume price should be displayed
      title: Product
      description: Representation of a Product
    ProductExpressUpdateElement:
      type: object
      properties:
        catalogId:
          type: string
          description: Catalog identifier
        catalogVersion:
          type: string
          description: Catalog version
        code:
          type: string
          description: Code of product express update element
      title: ProductExpressUpdateElement
      description: Representation of a Product Express Update Element
    ProductExpressUpdateElementList:
      type: object
      properties:
        productExpressUpdateElements:
          type: array
          description: List of product express update element
          items:
            $ref: "#/components/schemas/ProductExpressUpdateElement"
      title: ProductExpressUpdateElementList
      description: Representation of a Product Express Update Element List
    ProductList:
      type: object
      properties:
        catalog:
          type: string
          description: Catalog of product list
        currentPage:
          type: integer
          format: int32
          description: Number of current page
        products:
          type: array
          description: List of products
          items:
            $ref: "#/components/schemas/Product"
        totalPageCount:
          type: integer
          format: int32
          description: Total page count
        totalProductCount:
          type: integer
          format: int32
          description: Total product count
        version:
          type: string
          description: Version of product list
      title: ProductList
      description: Representation of a Product List
    ProductReference:
      type: object
      properties:
        description:
          type: string
          description: Reference description
        preselected:
          type: boolean
          description: Flag stating if product reference is preselected
        quantity:
          type: integer
          format: int32
          description: Reference quantity
        referenceType:
          type: string
          description: Reference type
        target:
          $ref: "#/components/schemas/Product"
      title: ProductReference
      description: Representation of a Product Reference
    ProductReferenceList:
      type: object
      properties:
        references:
          type: array
          description: List of product references
          items:
            $ref: "#/components/schemas/ProductReference"
      title: ProductReferenceList
      description: Representation of a Product Reference List
    ProductSearchPage:
      type: object
      properties:
        breadcrumbs:
          type: array
          description: List of breadcrumbs info
          items:
            $ref: "#/components/schemas/Breadcrumb"
        categoryCode:
          type: string
          description: Code of category
        currentQuery:
          $ref: "#/components/schemas/SearchState"
        facets:
          type: array
          description: List of facets
          items:
            $ref: "#/components/schemas/Facet"
        freeTextSearch:
          type: string
          description: Free text search
        keywordRedirectUrl:
          type: string
          description: Redirect url address keyword
        pagination:
          $ref: "#/components/schemas/deprecatedPagination"
        products:
          type: array
          description: List of products
          items:
            $ref: "#/components/schemas/Product"
        sorts:
          type: array
          description: List of sorts
          items:
            $ref: "#/components/schemas/Sort"
        spellingSuggestion:
          $ref: "#/components/schemas/SpellingSuggestion"
      title: ProductSearchPage
      description: Representation of a Product Search Page
    Promotion:
      type: object
      properties:
        code:
          type: string
          description: Code of the promotion
        couldFireMessages:
          type: array
          description: Message about promotion which is displayed when planning potential
            promotion. This field has higher priority over promotion description
          items:
            type: string
        description:
          type: string
          description: Description of the promotion
        enabled:
          type: boolean
          description: Boolean flag if promotion is enabled
        endDate:
          type: string
          format: date-time
          description: Last date of validity of the promotion
        firedMessages:
          type: array
          description: Message fired while the promotion is active. This is info how much
            you will get when applying the promotion
          items:
            type: string
        priority:
          type: integer
          format: int32
          description: Priority index as numeric value of the promotion. Higher number
            means higher priority
        productBanner:
          $ref: "#/components/schemas/Image"
        promotionGroup:
          type: string
          description: Group of the promotion
        promotionType:
          type: string
          description: Type of the promotion
        restrictions:
          type: array
          description: List of promotion restrictions
          items:
            $ref: "#/components/schemas/PromotionRestriction"
        startDate:
          type: string
          format: date-time
          description: The initial date of the promotion
        title:
          type: string
          description: Promotion title
      title: Promotion
      description: Representation of a Promotion
    PromotionList:
      type: object
      properties:
        promotions:
          type: array
          description: List of promotions
          items:
            $ref: "#/components/schemas/Promotion"
      title: PromotionList
      description: Representation of a Promotion list
    PromotionOrderEntryConsumed:
      type: object
      properties:
        adjustedUnitPrice:
          type: number
          format: double
          description: Adjusted unit price for promotion order entry
        code:
          type: string
          description: Order entry code
        orderEntryNumber:
          type: integer
          format: int32
          description: Order entry number
        quantity:
          type: integer
          format: int64
          description: Quantity of promotion order entry
      title: PromotionOrderEntryConsumed
      description: Representation of a Promotion order entry consumed
    PromotionRestriction:
      type: object
      properties:
        description:
          type: string
          description: Description of the promotion restriction
        restrictionType:
          type: string
          description: Type of the promotion restriction
      title: PromotionRestriction
      description: Representation of a Promotion Restriction
    PromotionResult:
      type: object
      properties:
        consumedEntries:
          type: array
          description: List of promotion order entries consumed
          items:
            $ref: "#/components/schemas/PromotionOrderEntryConsumed"
        description:
          type: string
          description: Description of promotion result
        promotion:
          $ref: "#/components/schemas/Promotion"
      title: PromotionResult
      description: Representation of a Promotion result
    PromotionResultList:
      type: object
      properties:
        promotions:
          type: array
          description: List of promotion results
          items:
            $ref: "#/components/schemas/PromotionResult"
      title: PromotionResultList
      description: Representation of a Promotion result list
    Region:
      type: object
      properties:
        countryIso:
          type: string
          description: Country code in iso format
        isocode:
          type: string
          description: Country and Region code in iso format
        isocodeShort:
          type: string
          description: Region code in short iso form
        name:
          type: string
          description: Name of the region
      title: Region
      description: Response body fields which will be returned while fetching the list
        of country's regions.
    RegionList:
      type: object
      properties:
        regions:
          type: array
          description: This is the list of Region fields that should be returned in the
            response body
          items:
            $ref: "#/components/schemas/Region"
      title: RegionList
      description: List of Regions
    ResetPassword:
      type: object
      required:
        - newPassword
        - token
      properties:
        newPassword:
          type: string
          description: new password string which is required to complete process of
            resetting password
        token:
          type: string
          description: token value which will be generated as unique string that will be
            sent with email to allow user for completing reset-password
            operation
      title: ResetPassword
      description: Representation of a Reset Password
    ReturnRequest:
      type: object
      properties:
        cancellable:
          type: boolean
          example: true
          description: Boolean flag for whether the return request is cancellable
        code:
          type: string
          example: "00000001"
          description: Return request code
        creationTime:
          type: string
          format: date-time
          example: 2020-12-31T09:00:00+0000
          description: Date of the return request creation
        deliveryCost:
          $ref: "#/components/schemas/Price"
        order:
          $ref: "#/components/schemas/Order"
        refundDeliveryCost:
          type: boolean
          example: false
          description: Boolean flag for whether there is a delivery cost for refund
        returnEntries:
          type: array
          description: Entries of the return request which contains information about the
            returned product
          items:
            $ref: "#/components/schemas/ReturnRequestEntry"
        returnLabelDownloadUrl:
          type: string
          description: URL of the return label
        rma:
          type: string
          example: "00000001"
          description: Return merchandise authorization number
        status:
          type: string
          description: Status of return request
        subTotal:
          $ref: "#/components/schemas/Price"
        totalPrice:
          $ref: "#/components/schemas/Price"
      title: ReturnRequest
      description: Representation of a return request for an order
    ReturnRequestEntry:
      type: object
      properties:
        expectedQuantity:
          type: integer
          format: int64
          example: 5
          description: Quantity which is expected to be returned for this return request
            entry
        orderEntry:
          $ref: "#/components/schemas/OrderEntry"
        refundAmount:
          $ref: "#/components/schemas/Price"
      title: ReturnRequestEntry
      description: Representation of a return request entry which contains information
        about the returned product
    ReturnRequestEntryInput:
      type: object
      required:
        - orderEntryNumber
        - quantity
      properties:
        orderEntryNumber:
          type: integer
          format: int32
          example: 1
          description: Order entry number of the returned product
        quantity:
          type: integer
          format: int64
          example: 5
          description: Quantity of the product which belongs to the order entry and is
            requested to be returned
      title: ReturnRequestEntryInput
      description: Representation of a return request entry input for an order
    ReturnRequestEntryInputList:
      type: object
      required:
        - orderCode
        - returnRequestEntryInputs
      properties:
        orderCode:
          type: string
          example: "00000001"
          description: Code of the order which return request is related to
        returnRequestEntryInputs:
          type: array
          description: Return request entry inputs which contain information about the
            order entries which are requested to be returned
          items:
            $ref: "#/components/schemas/ReturnRequestEntryInput"
      title: ReturnRequestEntryInputList
      description: Representation of a return request entry input list for an order
    ReturnRequestList:
      type: object
      properties:
        pagination:
          $ref: "#/components/schemas/deprecatedPagination"
        returnRequests:
          type: array
          description: List of order return requests
          items:
            $ref: "#/components/schemas/ReturnRequest"
        sorts:
          type: array
          description: List of sorts
          items:
            $ref: "#/components/schemas/Sort"
      title: ReturnRequestList
      description: Representation of an Order Return Request List
    ReturnRequestModification:
      type: object
      properties:
        status:
          type: string
          description: Status of the return request
          enum:
            - CANCELLING
      title: ReturnRequestModification
      description: Representation of modifications for a return request
    Review:
      type: object
      properties:
        alias:
          type: string
          description: Alias name for the review
        comment:
          type: string
          description: Review comment
        date:
          type: string
          format: date-time
          description: Date of the review
        headline:
          type: string
          description: Review headline
        id:
          type: string
          description: Identifier of review
        principal:
          $ref: "#/components/schemas/User"
        rating:
          type: number
          format: double
          description: Review rating value
      title: Review
      description: Representation of a Review
    ReviewList:
      type: object
      properties:
        reviews:
          type: array
          description: List of reviews
          items:
            $ref: "#/components/schemas/Review"
      title: ReviewList
      description: Representation of a Review List
    SaveCartResult:
      type: object
      properties:
        savedCartData:
          $ref: "#/components/schemas/Cart"
      title: SaveCartResult
      description: Representation of a Save Cart Result
    SearchQuery:
      type: object
      properties:
        value:
          type: string
          description: Value of search query
      title: SearchQuery
      description: Representation of a Search Query
    SearchState:
      type: object
      properties:
        query:
          $ref: "#/components/schemas/SearchQuery"
        url:
          type: string
          description: Url address of search state
      title: SearchState
      description: Representation of a Search State
    Sort:
      type: object
      properties:
        code:
          type: string
          description: Code of Sort
        name:
          type: string
          description: Name of Sort
        selected:
          type: boolean
          description: Flag stating when Sort is selected
      title: Sort
      description: Representation a Sort option
    SpecialOpeningDay:
      type: object
      properties:
        closed:
          type: boolean
          description: Flag stating if special opening day is closed
        closingTime:
          $ref: "#/components/schemas/Time"
        comment:
          type: string
          description: Comment field
        date:
          type: string
          format: date-time
          description: Date of special opening day
        formattedDate:
          type: string
          description: Text representation of the date of special opening day
        name:
          type: string
          description: Name of the special opening day event
        openingTime:
          $ref: "#/components/schemas/Time"
      title: SpecialOpeningDay
      description: Representation of a special opening day
    SpellingSuggestion:
      type: object
      properties:
        query:
          type: string
          description: Query for spelling suggestion
        suggestion:
          type: string
          description: Spelling suggestion
      title: SpellingSuggestion
      description: Representation of a Spell Checker Suggestion
    StatusSummary:
      type: object
      properties:
        numberOfIssues:
          type: integer
          format: int32
          example: 3
          description: Number of issues per status
        status:
          type: string
          example: ERROR
          description: Status or severity indicator, can be one of ERROR, WARNING, INFO or
            SUCCESS
      title: StatusSummary
      description: Representation of a status summary, an aggregated view on issues
        for a specific status or severity. These issues are attached to
        configurations of products or order entries
    Stock:
      type: object
      properties:
        isValueRounded:
          type: boolean
          description: Indicate whether Stock level value is rounded
        stockLevel:
          type: integer
          format: int64
          description: Stock level expressed as number
        stockLevelStatus:
          type: string
          description: Status of stock level
      title: Stock
      description: Representation of a Stock
    StoreCount:
      type: object
      properties:
        count:
          type: integer
          format: int32
          description: Count
        isoCode:
          type: string
          description: Iso code of store
        name:
          type: string
          description: Name of store count
        storeCountDataList:
          type: array
          description: List of store counts
          items:
            $ref: "#/components/schemas/StoreCount"
        type:
          type: string
          description: Type of store count
      title: StoreCount
      description: Representation of a Store Count
    StoreCountList:
      type: object
      properties:
        countriesAndRegionsStoreCount:
          type: array
          description: List of store counts
          items:
            $ref: "#/components/schemas/StoreCount"
      title: StoreCountList
      description: Representation of a Store Count List
    StoreFinderSearchPage:
      type: object
      properties:
        boundEastLongitude:
          type: number
          format: double
          description: Bound east longitude
        boundNorthLatitude:
          type: number
          format: double
          description: Bound north latitude
        boundSouthLatitude:
          type: number
          format: double
          description: Bound south latitude
        boundWestLongitude:
          type: number
          format: double
          description: Bound west longitude
        locationText:
          type: string
          description: Location text
        pagination:
          $ref: "#/components/schemas/deprecatedPagination"
        sorts:
          type: array
          description: List of sortings
          items:
            $ref: "#/components/schemas/Sort"
        sourceLatitude:
          type: number
          format: double
          description: Source latitude
        sourceLongitude:
          type: number
          format: double
          description: Source longitude
        stores:
          type: array
          description: List of stores
          items:
            $ref: "#/components/schemas/PointOfService"
      title: StoreFinderSearchPage
      description: Representation of a Store finder search page
    StoreFinderStockSearchPage:
      type: object
      properties:
        boundEastLongitude:
          type: number
          format: double
          description: Bound to east longitude
        boundNorthLatitude:
          type: number
          format: double
          description: Bound to north latitude
        boundSouthLatitude:
          type: number
          format: double
          description: Bound to south latitude
        boundWestLongitude:
          type: number
          format: double
          description: Bound to west longitude
        locationText:
          type: string
          description: Location text
        pagination:
          $ref: "#/components/schemas/deprecatedPagination"
        product:
          $ref: "#/components/schemas/Product"
        sorts:
          type: array
          description: List of sorts
          items:
            $ref: "#/components/schemas/Sort"
        sourceLatitude:
          type: number
          format: double
          description: Source latitude
        sourceLongitude:
          type: number
          format: double
          description: Source longitude
        stores:
          type: array
          description: List of stores
          items:
            $ref: "#/components/schemas/PointOfServiceStock"
      title: StoreFinderStockSearchPage
      description: Representation of a Store Finder Stock Search Page
    Suggestion:
      type: object
      properties:
        value:
          type: string
          description: Suggestion value
      title: Suggestion
      description: Representation of a Suggestion
    SuggestionList:
      type: object
      properties:
        suggestions:
          type: array
          description: List of suggestions
          items:
            $ref: "#/components/schemas/Suggestion"
      title: SuggestionList
      description: Representation of a Suggestion List
    Time:
      type: object
      properties:
        formattedHour:
          type: string
          description: Formatted hour
        hour:
          type: integer
          format: int32
          description: Hour part of the time data
          minimum: -128
          maximum: 127
        minute:
          type: integer
          format: int32
          description: Minute part of the time data
          minimum: -128
          maximum: 127
      title: Time
      description: Representation of a Time
    Title:
      type: object
      properties:
        code:
          type: string
          description: Title code
        name:
          type: string
          description: Title name
      title: Title
      description: Representation of a Title
    TitleList:
      type: object
      properties:
        titles:
          type: array
          description: List of titles
          items:
            $ref: "#/components/schemas/Title"
      title: TitleList
      description: Representation of a Title List
    User:
      type: object
      properties:
        active:
          type: boolean
          example: true
          description: Boolean flag of whether the user is active/enabled or not
        approvers:
          type: array
          description: List of organizational approvers
          items:
            $ref: "#/components/schemas/User"
        currency:
          $ref: "#/components/schemas/Currency"
        customerId:
          type: string
          description: Customer identifier
        deactivationDate:
          type: string
          format: date-time
          description: Deactivation date
        defaultAddress:
          $ref: "#/components/schemas/Address"
        displayUid:
          type: string
          description: User identifier
        email:
          type: string
          example: mark.rivers@rustic-hw.com
          description: Email of the user
        firstName:
          type: string
          description: User first name
        language:
          $ref: "#/components/schemas/Language"
        lastName:
          type: string
          description: User last name
        name:
          type: string
          description: Name of the user
        orgUnit:
          $ref: "#/components/schemas/B2BUnit"
        roles:
          type: array
          items:
            type: string
        selected:
          type: boolean
          example: true
          description: Boolean flag of whether the user is selected
        title:
          type: string
          description: User title
        titleCode:
          type: string
          description: User title code
        uid:
          type: string
          description: Unique user identifier
      title: User
      description: Representation of an User
    UserGroup:
      type: object
      properties:
        members:
          type: array
          description: List of members
          items:
            $ref: "#/components/schemas/Principal"
        membersCount:
          type: integer
          format: int32
          description: Number of members
        name:
          type: string
          description: Name of the user
        subGroups:
          type: array
          description: List of subgroups
          items:
            $ref: "#/components/schemas/UserGroup"
        uid:
          type: string
          description: Unique user identifier
      title: UserGroup
      description: Representation of an User Group
    UserGroupList:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
          description: Current page
        numberOfPages:
          type: integer
          format: int32
          description: Number of pages
        pageSize:
          type: integer
          format: int32
          description: Page size
        totalNumber:
          type: integer
          format: int32
          description: Total number
        userGroups:
          type: array
          description: List of user groups
          items:
            $ref: "#/components/schemas/UserGroup"
      title: UserGroupList
      description: Representation of an User Group List
    UserSignUp:
      type: object
      required:
        - firstName
        - lastName
        - password
        - uid
      properties:
        firstName:
          type: string
          description: first name of the user
        lastName:
          type: string
          description: last name of the user
        password:
          type: string
          description: user password
        titleCode:
          type: string
        uid:
          type: string
          description: user id, unique string required to create new user. It can be email
      title: UserSignUp
      description: Representation of an UserSignUp. Consists of fields required to
        register new customer
    VariantCategory:
      type: object
      properties:
        hasImage:
          type: boolean
          description: Flag if varian category has image assigned
        name:
          type: string
          description: Variant category name
        priority:
          type: integer
          format: int32
          description: Priority number of variant category
      title: VariantCategory
      description: Representation of a Variant Category
    VariantMatrixElement:
      type: object
      properties:
        elements:
          type: array
          description: List of elements with the type of variant matrix element
          items:
            $ref: "#/components/schemas/VariantMatrixElement"
        isLeaf:
          type: boolean
        parentVariantCategory:
          $ref: "#/components/schemas/VariantCategory"
        variantOption:
          $ref: "#/components/schemas/VariantOption"
        variantValueCategory:
          $ref: "#/components/schemas/VariantValueCategory"
      title: VariantMatrixElement
      description: Representation of a Variant Matrix Element
    VariantOption:
      type: object
      properties:
        code:
          type: string
          description: Code of the variant option
        priceData:
          $ref: "#/components/schemas/Price"
        stock:
          $ref: "#/components/schemas/Stock"
        url:
          type: string
          description: Url address of the variant option
        variantOptionQualifiers:
          type: array
          description: List of variant option qualifiers
          items:
            $ref: "#/components/schemas/VariantOptionQualifier"
      title: VariantOption
      description: Representation of a Variant Option
    VariantOptionQualifier:
      type: object
      properties:
        image:
          $ref: "#/components/schemas/Image"
        name:
          type: string
          description: Name of variant option qualifier
        qualifier:
          type: string
          description: Qualifier
        value:
          type: string
          description: Value of variant option qualifier
      title: VariantOptionQualifier
      description: Representation of a Variant Option Qualifier
    VariantValueCategory:
      type: object
      properties:
        name:
          type: string
          description: Name of the variant value category
        sequence:
          type: integer
          format: int32
          description: Sequence number of variant value category
        superCategories:
          type: array
          description: Parent category of variant value category
          items:
            $ref: "#/components/schemas/VariantCategory"
      title: VariantValueCategory
      description: Representation of a Variant Value Category
    Voucher:
      type: object
      properties:
        appliedValue:
          $ref: "#/components/schemas/Price"
        code:
          type: string
          description: "The identifier of the Voucher. This is the first part of voucher
            code which holds first 3 letters, like: 123"
        currency:
          $ref: "#/components/schemas/Currency"
        description:
          type: string
          description: Description of the voucher
        freeShipping:
          type: boolean
          description: Specifies if the order this voucher is applied to is shipped for
            free (true) or not (false). Defaults to false.
        name:
          type: string
          description: Name of the voucher
        value:
          type: number
          format: double
          description: "Value of the voucher. Example of such value is: 15.0d"
        valueFormatted:
          type: string
          description: Formatted value of the voucher
        valueString:
          type: string
          description: "The value of the voucher to display. Example: 15.0%"
        voucherCode:
          type: string
          description: "Voucher code, is the holder for keeping specific occasional
            voucher related to business usage. It can be generated and looks
            like: 123-H8BC-Y3D5-34AL"
      title: Voucher
      description: Representation of a Voucher
    VoucherList:
      type: object
      properties:
        vouchers:
          type: array
          description: List of vouchers
          items:
            $ref: "#/components/schemas/Voucher"
      title: VoucherList
      description: Representation of a Voucher List
    WeekdayOpeningDay:
      type: object
      properties:
        closed:
          type: boolean
          description: Flag stating if weekday opening day is closed
        closingTime:
          $ref: "#/components/schemas/Time"
        openingTime:
          $ref: "#/components/schemas/Time"
        weekDay:
          type: string
          description: Text representation of week day opening day
      title: WeekdayOpeningDay
      description: Representation of a Weekday Opening Day
    deprecatedPagination:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
          description: The current page number. The first page is number zero (0), the
            second page is number one (1), and so on
        pageSize:
          type: integer
          format: int32
          description: The number of results per page. A page may have less results if
            there are less than a full page of results, only on the last page in
            the results
        sort:
          type: string
          description: The selected sort code
        totalPages:
          type: integer
          format: int32
          description: The total number of pages. This is the number of pages, each of
            pageSize, required to display the totalResults.
        totalResults:
          type: integer
          format: int64
          description: The total number of matched results across all pages
      title: deprecatedPagination
      description: Representation of a search results pagination
    error:
      type: object
      properties:
        errorCode:
          type: string
          description: Error code
        exceptionMessage:
          type: string
        language:
          type: string
          example: English
        message:
          type: string
          description: Descriptive, human readable error message.
        position:
          type: integer
          format: int32
          example: 1
        reason:
          type: string
          description: Additional classification specific for each error type e.g.
            'noStock'.
        subject:
          type: string
          description: Identifier of the related object e.g. '1'.
        subjectType:
          type: string
          description: Type of the object related to the error e.g. 'entry'.
        type:
          type: string
          description: Type of the error e.g. 'LowStockError'.
      title: error
      description: Error message
    errorList:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: "#/components/schemas/error"
      title: errorList
      description: List of errors
    pagination:
      type: object
      properties:
        count:
          type: integer
          format: int32
          description: Number of elements on this page
        hasNext:
          type: boolean
          description: Indicates if there is next page
        hasPrevious:
          type: boolean
          description: Indicates if there is previous page
        page:
          type: integer
          format: int32
          description: Current page number
        totalCount:
          type: integer
          format: int64
          description: Total number of elements
        totalPages:
          type: integer
          format: int32
          description: Total number of pages
      title: pagination
      description: Pagination info
    sort:
      type: object
      properties:
        asc:
          type: boolean
        code:
          type: string
      title: sort
      description: Sort option
